env:
  CIRRUS_CLONE_DEPTH: "20"
  CIRRUS_SHELL: bash

  ARTIFACTORY_URL: VAULT[development/kv/data/repox data.url]
  ARTIFACTORY_PRIVATE_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader
  ARTIFACTORY_PRIVATE_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  ARTIFACTORY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  # Deploy public artifact to artifactory
  ARTIFACTORY_DEPLOY_USERNAME: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer username]
  ARTIFACTORY_DEPLOY_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
  ARTIFACTORY_DEPLOY_REPO: sonarsource-public-qa

  DEVELOCITY_TOKEN: VAULT[development/kv/data/develocity data.token]
  DEVELOCITY_ACCESS_KEY: develocity.sonar.build=${DEVELOCITY_TOKEN}

  GRADLE_USER_HOME: ${CIRRUS_WORKING_DIR}/.gradle

linux_image_template: &LINUX_IMAGE
  image: ${CIRRUS_AWS_ACCOUNT}.dkr.ecr.eu-central-1.amazonaws.com/base:j17-g7-latest
  cluster_name: ${CIRRUS_CLUSTER_NAME}
  region: eu-central-1
  namespace: default
  use_in_memory_disk: true

linux_2_cpu_4G_template: &LINUX_2_CPU_4G
  eks_container:
    <<: *LINUX_IMAGE
    cpu: 2
    memory: 4G

linux_4_cpu_8G_java_17_template: &LINUX_4_CPU_8G_JAVA_17
  eks_container:
    <<: *LINUX_IMAGE
    cpu: 4
    memory: 8G

eks_container: &CONTAINER_DEFINITION
  image: ${CIRRUS_AWS_ACCOUNT}.dkr.ecr.eu-central-1.amazonaws.com/base:j17-g7-latest
  cluster_name: ${CIRRUS_CLUSTER_NAME}
  region: eu-central-1
  namespace: default

log_develocity_url_script: &log_develocity_url_script |
  echo "Develocity URL: https://develocity.sonar.build/scans?search.publicHostnames=cirrus-ci-task-${CIRRUS_TASK_ID}"

## Build tasks

setup_gradle_cache_template: &SETUP_GRADLE_CACHE
  gradle_cache:
    folder: .gradle/caches
  create_gradle_directory_script:
    - mkdir -p "${CIRRUS_WORKING_DIR}/.gradle"

cleanup_gradle_cache_script_template: &CLEANUP_GRADLE_CACHE_SCRIPT
  cleanup_gradle_script:
    - /usr/bin/find "${CIRRUS_WORKING_DIR}/.gradle/caches/" -name "*.lock" -type f -delete
    - rm -rf "${CIRRUS_WORKING_DIR}/.gradle/caches/4.10.2/"
    - rm -rf "${CIRRUS_WORKING_DIR}/.gradle/caches/journal-1/"
    - rm -rf "${CIRRUS_WORKING_DIR}/.gradle/caches/build-cache-1/"

build_task:
  <<: *LINUX_2_CPU_4G
  <<: *SETUP_GRADLE_CACHE
  env:
    SONAR_TOKEN: VAULT[development/kv/data/next data.token]
    SONAR_HOST_URL: VAULT[development/kv/data/next data.url]
    DEPLOY_PULL_REQUEST: "true"
    ORG_GRADLE_PROJECT_signingKey: VAULT[development/kv/data/sign data.key]
    ORG_GRADLE_PROJECT_signingPassword: VAULT[development/kv/data/sign data.passphrase]
    ORG_GRADLE_PROJECT_signingKeyId: VAULT[development/kv/data/sign data.key_id]
  build_script:
    - *log_develocity_url_script
    - source cirrus-env BUILD
    - function gradle(){ ./gradlew "$@"; }; export -f gradle
    - gradle --version
    - source set_gradle_build_version
    - regular_gradle_build_deploy_analyze
  on_failure:
    error_log_artifacts:
      path: "hs_err_pid*.log"
    heap_dump_artifacts:
      path: "*.hprof"
  <<: *CLEANUP_GRADLE_CACHE_SCRIPT

sonar_shadow_scan_and_issue_replication_task:
  depends_on:
    - build
  # Only run when triggered by the cirrus-ci cron job named "nightly"
  only_if: $CIRRUS_CRON == "nightly"
  <<: *LINUX_2_CPU_4G
  <<: *SETUP_GRADLE_CACHE
  env:
    SONAR_PROJECT_KEY: "SonarSource_sonar-ruby"
    SHADOW_ORGANIZATION: "sonarsource"
    SHADOW_PROJECT_KEY: "SonarSource_sonar-ruby"
    # to replicate issue states from next
    SONAR_TOKEN: VAULT[development/kv/data/next data.token]
    SONAR_HOST_URL: https://next.sonarqube.com/sonarqube
    matrix:
      - name: "sonarcloud.io"
        SHADOW_SONAR_TOKEN: VAULT[development/kv/data/sonarcloud data.token]
        SHADOW_SONAR_HOST_URL: "https://sonarcloud.io"
      - name: "sonarqube.us"
        SHADOW_SONAR_TOKEN: VAULT[development/kv/data/sonarqube-us data.token]
        SHADOW_SONAR_HOST_URL: "https://sonarqube.us"
  build_and_shadow_scan_script:
    - *log_develocity_url_script
    - source cirrus-env BUILD
    - source set_gradle_build_version
    - ./shadow-scan-and-issue-replication.sh
  <<: *CLEANUP_GRADLE_CACHE_SCRIPT

### QA tasks

only_if_sonarsource_qa_template: &ONLY_IF_SONARSOURCE_QA
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" && ($CIRRUS_PR != "" || $CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*" || $CIRRUS_BRANCH =~ "dogfood-on-.*")

qa_task_filter_template: &QA_TASK_FILTER
  depends_on:
    - build
  <<: *ONLY_IF_SONARSOURCE_QA

gradle_its_template: &GRADLE_ITS_TEMPLATE
  <<: *SETUP_GRADLE_CACHE
  run_its_script:
    - *log_develocity_url_script
    - source cirrus-env QA
    - ./gradlew "${GRADLE_TASK}" "-P${ITS_PROJECT}"
      "-Dsonar.runtimeVersion=${SQ_VERSION}"
      "-Dorchestrator.artifactory.accessToken=${ARTIFACTORY_ACCESS_TOKEN}"
      "-DbuildNumber=$BUILD_NUMBER"
      -I "${GRADLE_HOME}/init.d/repoxAuth.init.gradle.kts"
      -Pqa --info --stacktrace --console plain --no-daemon --build-cache
  <<: *CLEANUP_GRADLE_CACHE_SCRIPT

qa_plugin_task:
  <<: *QA_TASK_FILTER
  env:
    GITHUB_TOKEN: VAULT[development/github/token/licenses-ro token]
    ITS_PROJECT: "plugin"
    GRADLE_TASK: ":its:plugin:test"
    matrix:
      - SQ_VERSION: "DEV"
      - SQ_VERSION: "LATEST_RELEASE"
  <<: *LINUX_4_CPU_8G_JAVA_17
  <<: *GRADLE_ITS_TEMPLATE

qa_ruling_task:
  <<: *QA_TASK_FILTER
  env:
    GITHUB_TOKEN: VAULT[development/github/token/licenses-ro token]
    SQ_VERSION: "LATEST_RELEASE"
    GRADLE_TASK: ":its:ruling:test"
    ITS_PROJECT: "ruling"
    GIT_SUB_MODULE: "its/sources"
  <<: *LINUX_4_CPU_8G_JAVA_17
  update_test_sources_script:
    - git submodule update --init --depth 1 "its/sources"
  <<: *GRADLE_ITS_TEMPLATE

### Promote task

promote_task:
  depends_on:
    - build
    - sonar_shadow_scan_and_issue_replication
    - qa_plugin
    - qa_ruling
  <<: *ONLY_IF_SONARSOURCE_QA
  eks_container:
    <<: *CONTAINER_DEFINITION
    cpu: 1
    memory: 1G
  env:
    ARTIFACTORY_PROMOTE_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promoter access_token]
    GITHUB_TOKEN: VAULT[development/github/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promotion token]
  promote_script:
    - *log_develocity_url_script
    - function gradle(){ ./gradlew "$@"; }; export -f gradle
    - cirrus_promote_gradle multi
