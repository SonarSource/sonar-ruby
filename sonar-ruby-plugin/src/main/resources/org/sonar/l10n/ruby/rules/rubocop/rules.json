[
  {
    "key": "Bundler/DuplicatedGem",
    "name": "Duplicated Gem (Bundler)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for duplicate gem entries in Gemfile.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Bundler/DuplicatedGem"
  },
  {
    "key": "Bundler/DuplicatedGroup",
    "name": "Duplicated Group (Bundler)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for duplicate group entries in Gemfile.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Bundler/DuplicatedGroup"
  },
  {
    "key": "Bundler/GemComment",
    "name": "Gem Comment (Bundler)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Add a comment describing each gem.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Bundler/GemComment"
  },
  {
    "key": "Bundler/GemFilename",
    "name": "Gem Filename (Bundler)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Enforces the filename for managing gems.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Bundler/GemFilename"
  },
  {
    "key": "Bundler/GemVersion",
    "name": "Gem Version (Bundler)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Requires or forbids specifying gem versions.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Bundler/GemVersion"
  },
  {
    "key": "Bundler/InsecureProtocolSource",
    "name": "Insecure Protocol Source (Bundler)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "The source `:gemcutter`, `:rubygems` and `:rubyforge` are deprecated because HTTP requests are insecure. Please change your source to 'https://rubygems.org' if possible, or 'http://rubygems.org' if not.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Bundler/InsecureProtocolSource"
  },
  {
    "key": "Bundler/OrderedGems",
    "name": "Ordered Gems (Bundler)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Gems within groups in the Gemfile should be alphabetically sorted.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Bundler/OrderedGems"
  },
  {
    "key": "Gemspec/DependencyVersion",
    "name": "Dependency Version (Gemspec)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Requires or forbids specifying gem dependency versions.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Gemspec/DependencyVersion"
  },
  {
    "key": "Gemspec/DeprecatedAttributeAssignment",
    "name": "Deprecated Attribute Assignment (Gemspec)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks that deprecated attribute assignments are not set in a gemspec file.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Gemspec/DeprecatedAttributeAssignment"
  },
  {
    "key": "Gemspec/DevelopmentDependencies",
    "name": "Development Dependencies (Gemspec)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks that development dependencies are specified in Gemfile rather than gemspec.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Gemspec/DevelopmentDependencies"
  },
  {
    "key": "Gemspec/DuplicatedAssignment",
    "name": "Duplicated Assignment (Gemspec)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "An attribute assignment method calls should be listed only once in a gemspec.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Gemspec/DuplicatedAssignment"
  },
  {
    "key": "Gemspec/OrderedDependencies",
    "name": "Ordered Dependencies (Gemspec)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Dependencies in the gemspec should be alphabetically sorted.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Gemspec/OrderedDependencies"
  },
  {
    "key": "Gemspec/RequireMFA",
    "name": "Require MFA (Gemspec)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks that the gemspec has metadata to require Multi-Factor Authentication from RubyGems.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Gemspec/RequireMFA"
  },
  {
    "key": "Gemspec/RequiredRubyVersion",
    "name": "Required Ruby Version (Gemspec)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks that `required_ruby_version` of gemspec is specified and equal to `TargetRubyVersion` of .rubocop.yml.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Gemspec/RequiredRubyVersion"
  },
  {
    "key": "Gemspec/RubyVersionGlobalsUsage",
    "name": "Ruby Version Globals Usage (Gemspec)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks usage of RUBY_VERSION in gemspec.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Gemspec/RubyVersionGlobalsUsage"
  },
  {
    "key": "Layout/AccessModifierIndentation",
    "name": "Access Modifier Indentation (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Check indentation of private/protected visibility modifiers.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/AccessModifierIndentation"
  },
  {
    "key": "Layout/ArgumentAlignment",
    "name": "Argument Alignment (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Align the arguments of a method call if they span more than one line.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/ArgumentAlignment"
  },
  {
    "key": "Layout/ArrayAlignment",
    "name": "Array Alignment (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Align the elements of an array literal if they span more than one line.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/ArrayAlignment"
  },
  {
    "key": "Layout/AssignmentIndentation",
    "name": "Assignment Indentation (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks the indentation of the first line of the right-hand-side of a multi-line assignment.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/AssignmentIndentation"
  },
  {
    "key": "Layout/BeginEndAlignment",
    "name": "Begin End Alignment (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Align ends corresponding to begins correctly.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/BeginEndAlignment"
  },
  {
    "key": "Layout/BlockAlignment",
    "name": "Block Alignment (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Align block ends correctly.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/BlockAlignment"
  },
  {
    "key": "Layout/BlockEndNewline",
    "name": "Block End Newline (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Put end statement of multiline block on its own line.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/BlockEndNewline"
  },
  {
    "key": "Layout/CaseIndentation",
    "name": "Case Indentation (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Indentation of when in a case/(when|in)/[else/]end.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/CaseIndentation"
  },
  {
    "key": "Layout/ClassStructure",
    "name": "Class Structure (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Enforces a configured order of definitions within a class body.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/ClassStructure"
  },
  {
    "key": "Layout/ClosingHeredocIndentation",
    "name": "Closing Heredoc Indentation (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks the indentation of here document closings.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/ClosingHeredocIndentation"
  },
  {
    "key": "Layout/ClosingParenthesisIndentation",
    "name": "Closing Parenthesis Indentation (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks the indentation of hanging closing parentheses.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/ClosingParenthesisIndentation"
  },
  {
    "key": "Layout/CommentIndentation",
    "name": "Comment Indentation (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Indentation of comments.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/CommentIndentation"
  },
  {
    "key": "Layout/ConditionPosition",
    "name": "Condition Position (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks for condition placed in a confusing position relative to the keyword.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/ConditionPosition"
  },
  {
    "key": "Layout/DefEndAlignment",
    "name": "Def End Alignment (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Align ends corresponding to defs correctly.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/DefEndAlignment"
  },
  {
    "key": "Layout/DotPosition",
    "name": "Dot Position (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks the position of the dot in multi-line method calls.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/DotPosition"
  },
  {
    "key": "Layout/ElseAlignment",
    "name": "Else Alignment (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Align elses and elsifs correctly.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/ElseAlignment"
  },
  {
    "key": "Layout/EmptyComment",
    "name": "Empty Comment (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks empty comment.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/EmptyComment"
  },
  {
    "key": "Layout/EmptyLineAfterGuardClause",
    "name": "Empty Line After Guard Clause (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Add empty line after guard clause.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/EmptyLineAfterGuardClause"
  },
  {
    "key": "Layout/EmptyLineAfterMagicComment",
    "name": "Empty Line After Magic Comment (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Add an empty line after magic comments to separate them from code.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/EmptyLineAfterMagicComment"
  },
  {
    "key": "Layout/EmptyLineAfterMultilineCondition",
    "name": "Empty Line After Multiline Condition (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Enforces empty line after multiline condition.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/EmptyLineAfterMultilineCondition"
  },
  {
    "key": "Layout/EmptyLineBetweenDefs",
    "name": "Empty Line Between Defs (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Use empty lines between class/module/method defs.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/EmptyLineBetweenDefs"
  },
  {
    "key": "Layout/EmptyLines",
    "name": "Empty Lines (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Don't use several empty lines in a row.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/EmptyLines"
  },
  {
    "key": "Layout/EmptyLinesAroundAccessModifier",
    "name": "Empty Lines Around Access Modifier (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Keep blank lines around access modifiers.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/EmptyLinesAroundAccessModifier"
  },
  {
    "key": "Layout/EmptyLinesAroundArguments",
    "name": "Empty Lines Around Arguments (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Keeps track of empty lines around method arguments.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/EmptyLinesAroundArguments"
  },
  {
    "key": "Layout/EmptyLinesAroundAttributeAccessor",
    "name": "Empty Lines Around Attribute Accessor (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Keep blank lines around attribute accessors.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/EmptyLinesAroundAttributeAccessor"
  },
  {
    "key": "Layout/EmptyLinesAroundBeginBody",
    "name": "Empty Lines Around Begin Body (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Keeps track of empty lines around begin-end bodies.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/EmptyLinesAroundBeginBody"
  },
  {
    "key": "Layout/EmptyLinesAroundBlockBody",
    "name": "Empty Lines Around Block Body (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Keeps track of empty lines around block bodies.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/EmptyLinesAroundBlockBody"
  },
  {
    "key": "Layout/EmptyLinesAroundClassBody",
    "name": "Empty Lines Around Class Body (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Keeps track of empty lines around class bodies.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/EmptyLinesAroundClassBody"
  },
  {
    "key": "Layout/EmptyLinesAroundExceptionHandlingKeywords",
    "name": "Empty Lines Around Exception Handling Keywords (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Keeps track of empty lines around exception handling keywords.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/EmptyLinesAroundExceptionHandlingKeywords"
  },
  {
    "key": "Layout/EmptyLinesAroundMethodBody",
    "name": "Empty Lines Around Method Body (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Keeps track of empty lines around method bodies.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/EmptyLinesAroundMethodBody"
  },
  {
    "key": "Layout/EmptyLinesAroundModuleBody",
    "name": "Empty Lines Around Module Body (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Keeps track of empty lines around module bodies.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/EmptyLinesAroundModuleBody"
  },
  {
    "key": "Layout/EndAlignment",
    "name": "End Alignment (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Align ends correctly.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/EndAlignment"
  },
  {
    "key": "Layout/EndOfLine",
    "name": "End Of Line (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Use Unix-style line endings.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/EndOfLine"
  },
  {
    "key": "Layout/ExtraSpacing",
    "name": "Extra Spacing (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Do not use unnecessary spacing.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/ExtraSpacing"
  },
  {
    "key": "Layout/FirstArgumentIndentation",
    "name": "First Argument Indentation (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks the indentation of the first argument in a method call.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/FirstArgumentIndentation"
  },
  {
    "key": "Layout/FirstArrayElementIndentation",
    "name": "First Array Element Indentation (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks the indentation of the first element in an array literal.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/FirstArrayElementIndentation"
  },
  {
    "key": "Layout/FirstArrayElementLineBreak",
    "name": "First Array Element Line Break (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks for a line break before the first element in a multi-line array.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/FirstArrayElementLineBreak"
  },
  {
    "key": "Layout/FirstHashElementIndentation",
    "name": "First Hash Element Indentation (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks the indentation of the first key in a hash literal.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/FirstHashElementIndentation"
  },
  {
    "key": "Layout/FirstHashElementLineBreak",
    "name": "First Hash Element Line Break (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks for a line break before the first element in a multi-line hash.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/FirstHashElementLineBreak"
  },
  {
    "key": "Layout/FirstMethodArgumentLineBreak",
    "name": "First Method Argument Line Break (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks for a line break before the first argument in a multi-line method call.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/FirstMethodArgumentLineBreak"
  },
  {
    "key": "Layout/FirstMethodParameterLineBreak",
    "name": "First Method Parameter Line Break (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks for a line break before the first parameter in a multi-line method parameter definition.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/FirstMethodParameterLineBreak"
  },
  {
    "key": "Layout/FirstParameterIndentation",
    "name": "First Parameter Indentation (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks the indentation of the first parameter in a method definition.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/FirstParameterIndentation"
  },
  {
    "key": "Layout/HashAlignment",
    "name": "Hash Alignment (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Align the elements of a hash literal if they span more than one line.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/HashAlignment"
  },
  {
    "key": "Layout/HeredocArgumentClosingParenthesis",
    "name": "Heredoc Argument Closing Parenthesis (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks for the placement of the closing parenthesis in a method call that passes a HEREDOC string as an argument.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/HeredocArgumentClosingParenthesis"
  },
  {
    "key": "Layout/HeredocIndentation",
    "name": "Heredoc Indentation (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks the indentation of the here document bodies.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/HeredocIndentation"
  },
  {
    "key": "Layout/IndentationConsistency",
    "name": "Indentation Consistency (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Keep indentation straight.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/IndentationConsistency"
  },
  {
    "key": "Layout/IndentationStyle",
    "name": "Indentation Style (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Consistent indentation either with tabs only or spaces only.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/IndentationStyle"
  },
  {
    "key": "Layout/IndentationWidth",
    "name": "Indentation Width (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Use 2 spaces for indentation.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/IndentationWidth"
  },
  {
    "key": "Layout/InitialIndentation",
    "name": "Initial Indentation (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks the indentation of the first non-blank non-comment line in a file.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/InitialIndentation"
  },
  {
    "key": "Layout/LeadingCommentSpace",
    "name": "Leading Comment Space (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Comments should start with a space.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/LeadingCommentSpace"
  },
  {
    "key": "Layout/LeadingEmptyLines",
    "name": "Leading Empty Lines (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Check for unnecessary blank lines at the beginning of a file.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/LeadingEmptyLines"
  },
  {
    "key": "Layout/LineContinuationLeadingSpace",
    "name": "Line Continuation Leading Space (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Use trailing spaces instead of leading spaces in strings broken over multiple lines (by a backslash).",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/LineContinuationLeadingSpace"
  },
  {
    "key": "Layout/LineContinuationSpacing",
    "name": "Line Continuation Spacing (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks the spacing in front of backslash in line continuations.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/LineContinuationSpacing"
  },
  {
    "key": "Layout/LineEndStringConcatenationIndentation",
    "name": "Line End String Concatenation Indentation (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks the indentation of the next line after a line that ends with a string literal and a backslash.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/LineEndStringConcatenationIndentation"
  },
  {
    "key": "Layout/LineLength",
    "name": "Line Length (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks that line length does not exceed the configured limit.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/LineLength"
  },
  {
    "key": "Layout/MultilineArrayBraceLayout",
    "name": "Multiline Array Brace Layout (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks that the closing brace in an array literal is either on the same line as the last array element, or a new line.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/MultilineArrayBraceLayout"
  },
  {
    "key": "Layout/MultilineArrayLineBreaks",
    "name": "Multiline Array Line Breaks (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks that each item in a multi-line array literal starts on a separate line.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/MultilineArrayLineBreaks"
  },
  {
    "key": "Layout/MultilineAssignmentLayout",
    "name": "Multiline Assignment Layout (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Check for a newline after the assignment operator in multi-line assignments.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/MultilineAssignmentLayout"
  },
  {
    "key": "Layout/MultilineBlockLayout",
    "name": "Multiline Block Layout (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Ensures newlines after multiline block do statements.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/MultilineBlockLayout"
  },
  {
    "key": "Layout/MultilineHashBraceLayout",
    "name": "Multiline Hash Brace Layout (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks that the closing brace in a hash literal is either on the same line as the last hash element, or a new line.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/MultilineHashBraceLayout"
  },
  {
    "key": "Layout/MultilineHashKeyLineBreaks",
    "name": "Multiline Hash Key Line Breaks (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks that each item in a multi-line hash literal starts on a separate line.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/MultilineHashKeyLineBreaks"
  },
  {
    "key": "Layout/MultilineMethodArgumentLineBreaks",
    "name": "Multiline Method Argument Line Breaks (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks that each argument in a multi-line method call starts on a separate line.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/MultilineMethodArgumentLineBreaks"
  },
  {
    "key": "Layout/MultilineMethodCallBraceLayout",
    "name": "Multiline Method Call Brace Layout (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks that the closing brace in a method call is either on the same line as the last method argument, or a new line.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/MultilineMethodCallBraceLayout"
  },
  {
    "key": "Layout/MultilineMethodCallIndentation",
    "name": "Multiline Method Call Indentation (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks indentation of method calls with the dot operator that span more than one line.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/MultilineMethodCallIndentation"
  },
  {
    "key": "Layout/MultilineMethodDefinitionBraceLayout",
    "name": "Multiline Method Definition Brace Layout (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks that the closing brace in a method definition is either on the same line as the last method parameter, or a new line.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/MultilineMethodDefinitionBraceLayout"
  },
  {
    "key": "Layout/MultilineMethodParameterLineBreaks",
    "name": "Multiline Method Parameter Line Breaks (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks that each parameter in a multi-line method definition starts on a separate line.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/MultilineMethodParameterLineBreaks"
  },
  {
    "key": "Layout/MultilineOperationIndentation",
    "name": "Multiline Operation Indentation (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks indentation of binary operations that span more than one line.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/MultilineOperationIndentation"
  },
  {
    "key": "Layout/ParameterAlignment",
    "name": "Parameter Alignment (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Align the parameters of a method definition if they span more than one line.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/ParameterAlignment"
  },
  {
    "key": "Layout/RedundantLineBreak",
    "name": "Redundant Line Break (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Do not break up an expression into multiple lines when it fits on a single line.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/RedundantLineBreak"
  },
  {
    "key": "Layout/RescueEnsureAlignment",
    "name": "Rescue Ensure Alignment (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Align rescues and ensures correctly.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/RescueEnsureAlignment"
  },
  {
    "key": "Layout/SingleLineBlockChain",
    "name": "Single Line Block Chain (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Put method call on a separate line if chained to a single line block.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SingleLineBlockChain"
  },
  {
    "key": "Layout/SpaceAfterColon",
    "name": "Space After Colon (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Use spaces after colons.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceAfterColon"
  },
  {
    "key": "Layout/SpaceAfterComma",
    "name": "Space After Comma (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Use spaces after commas.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceAfterComma"
  },
  {
    "key": "Layout/SpaceAfterMethodName",
    "name": "Space After Method Name (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Do not put a space between a method name and the opening parenthesis in a method definition.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceAfterMethodName"
  },
  {
    "key": "Layout/SpaceAfterNot",
    "name": "Space After Not (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Tracks redundant space after the ! operator.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceAfterNot"
  },
  {
    "key": "Layout/SpaceAfterSemicolon",
    "name": "Space After Semicolon (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Use spaces after semicolons.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceAfterSemicolon"
  },
  {
    "key": "Layout/SpaceAroundBlockParameters",
    "name": "Space Around Block Parameters (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks the spacing inside and after block parameters pipes.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceAroundBlockParameters"
  },
  {
    "key": "Layout/SpaceAroundEqualsInParameterDefault",
    "name": "Space Around Equals In Parameter Default (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks that the equals signs in parameter default assignments have or don't have surrounding space depending on configuration.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceAroundEqualsInParameterDefault"
  },
  {
    "key": "Layout/SpaceAroundKeyword",
    "name": "Space Around Keyword (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Use a space around keywords if appropriate.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceAroundKeyword"
  },
  {
    "key": "Layout/SpaceAroundMethodCallOperator",
    "name": "Space Around Method Call Operator (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks method call operators to not have spaces around them.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceAroundMethodCallOperator"
  },
  {
    "key": "Layout/SpaceAroundOperators",
    "name": "Space Around Operators (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Use a single space around operators.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceAroundOperators"
  },
  {
    "key": "Layout/SpaceBeforeBlockBraces",
    "name": "Space Before Block Braces (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks that the left block brace has or doesn't have space before it.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceBeforeBlockBraces"
  },
  {
    "key": "Layout/SpaceBeforeBrackets",
    "name": "Space Before Brackets (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks for receiver with a space before the opening brackets.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceBeforeBrackets"
  },
  {
    "key": "Layout/SpaceBeforeComma",
    "name": "Space Before Comma (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "No spaces before commas.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceBeforeComma"
  },
  {
    "key": "Layout/SpaceBeforeComment",
    "name": "Space Before Comment (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks for missing space between code and a comment on the same line.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceBeforeComment"
  },
  {
    "key": "Layout/SpaceBeforeFirstArg",
    "name": "Space Before First Arg (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks that exactly one space is used between a method name and the first argument for method calls without parentheses.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceBeforeFirstArg"
  },
  {
    "key": "Layout/SpaceBeforeSemicolon",
    "name": "Space Before Semicolon (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "No spaces before semicolons.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceBeforeSemicolon"
  },
  {
    "key": "Layout/SpaceInLambdaLiteral",
    "name": "Space In Lambda Literal (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks for spaces in lambda literals.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceInLambdaLiteral"
  },
  {
    "key": "Layout/SpaceInsideArrayLiteralBrackets",
    "name": "Space Inside Array Literal Brackets (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks the spacing inside array literal brackets.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceInsideArrayLiteralBrackets"
  },
  {
    "key": "Layout/SpaceInsideArrayPercentLiteral",
    "name": "Space Inside Array Percent Literal (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "No unnecessary additional spaces between elements in %i/%w literals.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceInsideArrayPercentLiteral"
  },
  {
    "key": "Layout/SpaceInsideBlockBraces",
    "name": "Space Inside Block Braces (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks that block braces have or don't have surrounding space. For blocks taking parameters, checks that the left brace has or doesn't have trailing space.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceInsideBlockBraces"
  },
  {
    "key": "Layout/SpaceInsideHashLiteralBraces",
    "name": "Space Inside Hash Literal Braces (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Use spaces inside hash literal braces - or don't.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceInsideHashLiteralBraces"
  },
  {
    "key": "Layout/SpaceInsideParens",
    "name": "Space Inside Parens (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "No spaces after ( or before ).",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceInsideParens"
  },
  {
    "key": "Layout/SpaceInsidePercentLiteralDelimiters",
    "name": "Space Inside Percent Literal Delimiters (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "No unnecessary spaces inside delimiters of %i/%w/%x literals.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceInsidePercentLiteralDelimiters"
  },
  {
    "key": "Layout/SpaceInsideRangeLiteral",
    "name": "Space Inside Range Literal (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "No spaces inside range literals.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceInsideRangeLiteral"
  },
  {
    "key": "Layout/SpaceInsideReferenceBrackets",
    "name": "Space Inside Reference Brackets (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks the spacing inside referential brackets.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceInsideReferenceBrackets"
  },
  {
    "key": "Layout/SpaceInsideStringInterpolation",
    "name": "Space Inside String Interpolation (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks for padding/surrounding spaces inside string interpolation.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/SpaceInsideStringInterpolation"
  },
  {
    "key": "Layout/TrailingEmptyLines",
    "name": "Trailing Empty Lines (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks trailing blank lines and final newline.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/TrailingEmptyLines"
  },
  {
    "key": "Layout/TrailingWhitespace",
    "name": "Trailing Whitespace (Layout)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Avoid trailing whitespace.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/TrailingWhitespace"
  },
  {
    "key": "Lint/AmbiguousAssignment",
    "name": "Ambiguous Assignment (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for mistyped shorthand assignments.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/AmbiguousAssignment"
  },
  {
    "key": "Lint/AmbiguousBlockAssociation",
    "name": "Ambiguous Block Association (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for ambiguous block association with method when param passed without parentheses.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/AmbiguousBlockAssociation"
  },
  {
    "key": "Lint/AmbiguousOperator",
    "name": "Ambiguous Operator (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for ambiguous operators in the first argument of a method invocation without parentheses.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/AmbiguousOperator"
  },
  {
    "key": "Lint/AmbiguousOperatorPrecedence",
    "name": "Ambiguous Operator Precedence (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for expressions containing multiple binary operations with ambiguous precedence.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/AmbiguousOperatorPrecedence"
  },
  {
    "key": "Lint/AmbiguousRange",
    "name": "Ambiguous Range (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for ranges with ambiguous boundaries.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/AmbiguousRange"
  },
  {
    "key": "Lint/AmbiguousRegexpLiteral",
    "name": "Ambiguous Regexp Literal (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for ambiguous regexp literals in the first argument of a method invocation without parentheses.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/AmbiguousRegexpLiteral"
  },
  {
    "key": "Lint/AssignmentInCondition",
    "name": "Assignment In Condition (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Don't use assignment in conditions.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/AssignmentInCondition"
  },
  {
    "key": "Lint/BigDecimalNew",
    "name": "Big Decimal New (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "`BigDecimal.new()` is deprecated. Use `BigDecimal()` instead.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/BigDecimalNew"
  },
  {
    "key": "Lint/BinaryOperatorWithIdenticalOperands",
    "name": "Binary Operator With Identical Operands (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for places where binary operator has identical operands.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/BinaryOperatorWithIdenticalOperands"
  },
  {
    "key": "Lint/BooleanSymbol",
    "name": "Boolean Symbol (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Check for `:true` and `:false` symbols.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/BooleanSymbol"
  },
  {
    "key": "Lint/CircularArgumentReference",
    "name": "Circular Argument Reference (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Default values in optional keyword arguments and optional ordinal arguments should not refer back to the name of the argument.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/CircularArgumentReference"
  },
  {
    "key": "Lint/ConstantDefinitionInBlock",
    "name": "Constant Definition In Block (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Do not define constants within a block.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/ConstantDefinitionInBlock"
  },
  {
    "key": "Lint/ConstantOverwrittenInRescue",
    "name": "Constant Overwritten In Rescue (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for overwriting an exception with an exception result by use `rescue =&gt;`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/ConstantOverwrittenInRescue"
  },
  {
    "key": "Lint/ConstantResolution",
    "name": "Constant Resolution (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Check that constants are fully qualified with `::`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/ConstantResolution"
  },
  {
    "key": "Lint/Debugger",
    "name": "Debugger (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Check for debugger calls.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/Debugger"
  },
  {
    "key": "Lint/DeprecatedClassMethods",
    "name": "Deprecated Class Methods (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Check for deprecated class method calls.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/DeprecatedClassMethods"
  },
  {
    "key": "Lint/DeprecatedConstants",
    "name": "Deprecated Constants (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for deprecated constants.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/DeprecatedConstants"
  },
  {
    "key": "Lint/DeprecatedOpenSSLConstant",
    "name": "Deprecated Open SSLConstant (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Don't use algorithm constants for `OpenSSL::Cipher` and `OpenSSL::Digest`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/DeprecatedOpenSSLConstant"
  },
  {
    "key": "Lint/DisjunctiveAssignmentInConstructor",
    "name": "Disjunctive Assignment In Constructor (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "In constructor, plain assignment is preferred over disjunctive.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/DisjunctiveAssignmentInConstructor"
  },
  {
    "key": "Lint/DuplicateBranch",
    "name": "Duplicate Branch (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks that there are no repeated bodies within `if/unless`, `case-when` and `rescue` constructs.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/DuplicateBranch"
  },
  {
    "key": "Lint/DuplicateCaseCondition",
    "name": "Duplicate Case Condition (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Do not repeat values in case conditionals.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/DuplicateCaseCondition"
  },
  {
    "key": "Lint/DuplicateElsifCondition",
    "name": "Duplicate Elsif Condition (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Do not repeat conditions used in if `elsif`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/DuplicateElsifCondition"
  },
  {
    "key": "Lint/DuplicateHashKey",
    "name": "Duplicate Hash Key (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Check for duplicate keys in hash literals.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/DuplicateHashKey"
  },
  {
    "key": "Lint/DuplicateMagicComment",
    "name": "Duplicate Magic Comment (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Check for duplicated magic comments.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/DuplicateMagicComment"
  },
  {
    "key": "Lint/DuplicateMatchPattern",
    "name": "Duplicate Match Pattern (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Do not repeat patterns in `in` keywords.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/DuplicateMatchPattern"
  },
  {
    "key": "Lint/DuplicateMethods",
    "name": "Duplicate Methods (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Check for duplicate method definitions.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/DuplicateMethods"
  },
  {
    "key": "Lint/DuplicateRegexpCharacterClassElement",
    "name": "Duplicate Regexp Character Class Element (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for duplicate elements in Regexp character classes.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/DuplicateRegexpCharacterClassElement"
  },
  {
    "key": "Lint/DuplicateRequire",
    "name": "Duplicate Require (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Check for duplicate `require`s and `require_relative`s.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/DuplicateRequire"
  },
  {
    "key": "Lint/DuplicateRescueException",
    "name": "Duplicate Rescue Exception (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks that there are no repeated exceptions used in `rescue` expressions.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/DuplicateRescueException"
  },
  {
    "key": "Lint/EachWithObjectArgument",
    "name": "Each With Object Argument (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Check for immutable argument given to each_with_object.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/EachWithObjectArgument"
  },
  {
    "key": "Lint/ElseLayout",
    "name": "Else Layout (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Check for odd code arrangement in an else block.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/ElseLayout"
  },
  {
    "key": "Lint/EmptyBlock",
    "name": "Empty Block (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for blocks without a body.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/EmptyBlock"
  },
  {
    "key": "Lint/EmptyClass",
    "name": "Empty Class (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for classes and metaclasses without a body.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/EmptyClass"
  },
  {
    "key": "Lint/EmptyConditionalBody",
    "name": "Empty Conditional Body (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for the presence of `if`, `elsif` and `unless` branches without a body.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/EmptyConditionalBody"
  },
  {
    "key": "Lint/EmptyEnsure",
    "name": "Empty Ensure (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for empty ensure block.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/EmptyEnsure"
  },
  {
    "key": "Lint/EmptyExpression",
    "name": "Empty Expression (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for empty expressions.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/EmptyExpression"
  },
  {
    "key": "Lint/EmptyFile",
    "name": "Empty File (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Enforces that Ruby source files are not empty.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/EmptyFile"
  },
  {
    "key": "Lint/EmptyInPattern",
    "name": "Empty In Pattern (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for the presence of `in` pattern branches without a body.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/EmptyInPattern"
  },
  {
    "key": "Lint/EmptyInterpolation",
    "name": "Empty Interpolation (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for empty string interpolation.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/EmptyInterpolation"
  },
  {
    "key": "Lint/EmptyWhen",
    "name": "Empty When (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for `when` branches with empty bodies.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/EmptyWhen"
  },
  {
    "key": "Lint/EnsureReturn",
    "name": "Ensure Return (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Do not use return in an ensure block.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/EnsureReturn"
  },
  {
    "key": "Lint/ErbNewArguments",
    "name": "Erb New Arguments (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Use `:trim_mode` and `:eoutvar` keyword arguments to `ERB.new`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/ErbNewArguments"
  },
  {
    "key": "Lint/FlipFlop",
    "name": "Flip Flop (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for flip-flops.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/FlipFlop"
  },
  {
    "key": "Lint/FloatComparison",
    "name": "Float Comparison (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for the presence of precise comparison of floating point numbers.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/FloatComparison"
  },
  {
    "key": "Lint/FloatOutOfRange",
    "name": "Float Out Of Range (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Catches floating-point literals too large or small for Ruby to represent.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/FloatOutOfRange"
  },
  {
    "key": "Lint/FormatParameterMismatch",
    "name": "Format Parameter Mismatch (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The number of parameters to format/sprint must match the fields.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/FormatParameterMismatch"
  },
  {
    "key": "Lint/HashCompareByIdentity",
    "name": "Hash Compare By Identity (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Prefer using `Hash#compare_by_identity` than using `object_id` for keys.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/HashCompareByIdentity"
  },
  {
    "key": "Lint/HeredocMethodCallPosition",
    "name": "Heredoc Method Call Position (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for the ordering of a method call where the receiver of the call is a HEREDOC.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/HeredocMethodCallPosition"
  },
  {
    "key": "Lint/IdentityComparison",
    "name": "Identity Comparison (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Prefer `equal?` over `==` when comparing `object_id`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/IdentityComparison"
  },
  {
    "key": "Lint/ImplicitStringConcatenation",
    "name": "Implicit String Concatenation (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for adjacent string literals on the same line, which could better be represented as a single string literal.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/ImplicitStringConcatenation"
  },
  {
    "key": "Lint/IncompatibleIoSelectWithFiberScheduler",
    "name": "Incompatible Io Select With Fiber Scheduler (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for `IO.select` that is incompatible with Fiber Scheduler.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/IncompatibleIoSelectWithFiberScheduler"
  },
  {
    "key": "Lint/IneffectiveAccessModifier",
    "name": "Ineffective Access Modifier (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for attempts to use `private` or `protected` to set the visibility of a class method, which does not work.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/IneffectiveAccessModifier"
  },
  {
    "key": "Lint/InheritException",
    "name": "Inherit Exception (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid inheriting from the `Exception` class.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/InheritException"
  },
  {
    "key": "Lint/InterpolationCheck",
    "name": "Interpolation Check (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for interpolation in a single quoted string.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/InterpolationCheck"
  },
  {
    "key": "Lint/LambdaWithoutLiteralBlock",
    "name": "Lambda Without Literal Block (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks uses of lambda without a literal block.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/LambdaWithoutLiteralBlock"
  },
  {
    "key": "Lint/LiteralAsCondition",
    "name": "Literal As Condition (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks of literals used in conditions.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/LiteralAsCondition"
  },
  {
    "key": "Lint/LiteralInInterpolation",
    "name": "Literal In Interpolation (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for literals used in interpolation.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/LiteralInInterpolation"
  },
  {
    "key": "Lint/Loop",
    "name": "Loop (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Use Kernel#loop with break rather than begin/end/until or begin/end/while for post-loop tests.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/Loop"
  },
  {
    "key": "Lint/MissingCopEnableDirective",
    "name": "Missing Cop Enable Directive (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for a `# rubocop:enable` after `# rubocop:disable`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/MissingCopEnableDirective"
  },
  {
    "key": "Lint/MissingSuper",
    "name": "Missing Super (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for the presence of constructors and lifecycle callbacks without calls to `super`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/MissingSuper"
  },
  {
    "key": "Lint/MixedCaseRange",
    "name": "Mixed Case Range (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for mixed-case character ranges since they include likely unintended characters.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/MixedCaseRange"
  },
  {
    "key": "Lint/MixedRegexpCaptureTypes",
    "name": "Mixed Regexp Capture Types (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Do not mix named captures and numbered captures in a Regexp literal.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/MixedRegexpCaptureTypes"
  },
  {
    "key": "Lint/MultipleComparison",
    "name": "Multiple Comparison (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Use `&amp;&amp;` operator to compare multiple values.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/MultipleComparison"
  },
  {
    "key": "Lint/NestedMethodDefinition",
    "name": "Nested Method Definition (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Do not use nested method definitions.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/NestedMethodDefinition"
  },
  {
    "key": "Lint/NestedPercentLiteral",
    "name": "Nested Percent Literal (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for nested percent literals.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/NestedPercentLiteral"
  },
  {
    "key": "Lint/NextWithoutAccumulator",
    "name": "Next Without Accumulator (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Do not omit the accumulator when calling `next` in a `reduce`/`inject` block.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/NextWithoutAccumulator"
  },
  {
    "key": "Lint/NoReturnInBeginEndBlocks",
    "name": "No Return In Begin End Blocks (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Do not `return` inside `begin..end` blocks in assignment contexts.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/NoReturnInBeginEndBlocks"
  },
  {
    "key": "Lint/NonAtomicFileOperation",
    "name": "Non Atomic File Operation (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for non-atomic file operations.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/NonAtomicFileOperation"
  },
  {
    "key": "Lint/NonDeterministicRequireOrder",
    "name": "Non Deterministic Require Order (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Always sort arrays returned by Dir.glob when requiring files.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/NonDeterministicRequireOrder"
  },
  {
    "key": "Lint/NonLocalExitFromIterator",
    "name": "Non Local Exit From Iterator (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Do not use return in iterator to cause non-local exit.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/NonLocalExitFromIterator"
  },
  {
    "key": "Lint/NumberConversion",
    "name": "Number Conversion (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks unsafe usage of number conversion methods.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/NumberConversion"
  },
  {
    "key": "Lint/NumberedParameterAssignment",
    "name": "Numbered Parameter Assignment (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for uses of numbered parameter assignment.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/NumberedParameterAssignment"
  },
  {
    "key": "Lint/OrAssignmentToConstant",
    "name": "Or Assignment To Constant (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks unintended or-assignment to constant.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/OrAssignmentToConstant"
  },
  {
    "key": "Lint/OrderedMagicComments",
    "name": "Ordered Magic Comments (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks the proper ordering of magic comments and whether a magic comment is not placed before a shebang.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/OrderedMagicComments"
  },
  {
    "key": "Lint/OutOfRangeRegexpRef",
    "name": "Out Of Range Regexp Ref (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for out of range reference for Regexp because it always returns nil.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/OutOfRangeRegexpRef"
  },
  {
    "key": "Lint/ParenthesesAsGroupedExpression",
    "name": "Parentheses As Grouped Expression (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for method calls with a space before the opening parenthesis.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/ParenthesesAsGroupedExpression"
  },
  {
    "key": "Lint/PercentStringArray",
    "name": "Percent String Array (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for unwanted commas and quotes in %w/%W literals.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/PercentStringArray"
  },
  {
    "key": "Lint/PercentSymbolArray",
    "name": "Percent Symbol Array (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for unwanted commas and colons in %i/%I literals.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/PercentSymbolArray"
  },
  {
    "key": "Lint/RaiseException",
    "name": "Raise Exception (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for `raise` or `fail` statements which are raising `Exception` class.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/RaiseException"
  },
  {
    "key": "Lint/RandOne",
    "name": "Rand One (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for `rand(1)` calls. Such calls always return `0` and most likely a mistake.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/RandOne"
  },
  {
    "key": "Lint/RedundantCopDisableDirective",
    "name": "Redundant Cop Disable Directive (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for rubocop:disable comments that can be removed. Note: this cop is not disabled when disabling all cops. It must be explicitly disabled.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/RedundantCopDisableDirective"
  },
  {
    "key": "Lint/RedundantCopEnableDirective",
    "name": "Redundant Cop Enable Directive (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for rubocop:enable comments that can be removed.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/RedundantCopEnableDirective"
  },
  {
    "key": "Lint/RedundantDirGlobSort",
    "name": "Redundant Dir Glob Sort (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for redundant `sort` method to `Dir.glob` and `Dir[]`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/RedundantDirGlobSort"
  },
  {
    "key": "Lint/RedundantRegexpQuantifiers",
    "name": "Redundant Regexp Quantifiers (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for redundant quantifiers in Regexps.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/RedundantRegexpQuantifiers"
  },
  {
    "key": "Lint/RedundantRequireStatement",
    "name": "Redundant Require Statement (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for unnecessary `require` statement.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/RedundantRequireStatement"
  },
  {
    "key": "Lint/RedundantSafeNavigation",
    "name": "Redundant Safe Navigation (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for redundant safe navigation calls.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/RedundantSafeNavigation"
  },
  {
    "key": "Lint/RedundantSplatExpansion",
    "name": "Redundant Splat Expansion (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for splat unnecessarily being called on literals.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/RedundantSplatExpansion"
  },
  {
    "key": "Lint/RedundantStringCoercion",
    "name": "Redundant String Coercion (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for Object#to_s usage in string interpolation.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/RedundantStringCoercion"
  },
  {
    "key": "Lint/RedundantWithIndex",
    "name": "Redundant With Index (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for redundant `with_index`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/RedundantWithIndex"
  },
  {
    "key": "Lint/RedundantWithObject",
    "name": "Redundant With Object (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for redundant `with_object`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/RedundantWithObject"
  },
  {
    "key": "Lint/RefinementImportMethods",
    "name": "Refinement Import Methods (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Use `Refinement#import_methods` when using `include` or `prepend` in `refine` block.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/RefinementImportMethods"
  },
  {
    "key": "Lint/RegexpAsCondition",
    "name": "Regexp As Condition (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Do not use regexp literal as a condition. The regexp literal matches `$_` implicitly.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/RegexpAsCondition"
  },
  {
    "key": "Lint/RequireParentheses",
    "name": "Require Parentheses (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Use parentheses in the method call to avoid confusion about precedence.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/RequireParentheses"
  },
  {
    "key": "Lint/RequireRangeParentheses",
    "name": "Require Range Parentheses (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks that a range literal is enclosed in parentheses when the end of the range is at a line break.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/RequireRangeParentheses"
  },
  {
    "key": "Lint/RequireRelativeSelfPath",
    "name": "Require Relative Self Path (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for uses a file requiring itself with `require_relative`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/RequireRelativeSelfPath"
  },
  {
    "key": "Lint/RescueException",
    "name": "Rescue Exception (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid rescuing the Exception class.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/RescueException"
  },
  {
    "key": "Lint/RescueType",
    "name": "Rescue Type (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid rescuing from non constants that could result in a `TypeError`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/RescueType"
  },
  {
    "key": "Lint/ReturnInVoidContext",
    "name": "Return In Void Context (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for return in void context.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/ReturnInVoidContext"
  },
  {
    "key": "Lint/SafeNavigationChain",
    "name": "Safe Navigation Chain (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Do not chain ordinary method call after safe navigation operator.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/SafeNavigationChain"
  },
  {
    "key": "Lint/SafeNavigationConsistency",
    "name": "Safe Navigation Consistency (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Check to make sure that if safe navigation is used for a method call in an `&amp;&amp;` or `||` condition that safe navigation is used for all method calls on that same object.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/SafeNavigationConsistency"
  },
  {
    "key": "Lint/SafeNavigationWithEmpty",
    "name": "Safe Navigation With Empty (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid `foo&amp;.empty?` in conditionals.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/SafeNavigationWithEmpty"
  },
  {
    "key": "Lint/ScriptPermission",
    "name": "Script Permission (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Grant script file execute permission.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/ScriptPermission"
  },
  {
    "key": "Lint/SelfAssignment",
    "name": "Self Assignment (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for self-assignments.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/SelfAssignment"
  },
  {
    "key": "Lint/SendWithMixinArgument",
    "name": "Send With Mixin Argument (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for `send` method when using mixin.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/SendWithMixinArgument"
  },
  {
    "key": "Lint/ShadowedArgument",
    "name": "Shadowed Argument (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid reassigning arguments before they were used.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/ShadowedArgument"
  },
  {
    "key": "Lint/ShadowedException",
    "name": "Shadowed Exception (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Avoid rescuing a higher level exception before a lower level exception.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/ShadowedException"
  },
  {
    "key": "Lint/ShadowingOuterLocalVariable",
    "name": "Shadowing Outer Local Variable (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Do not use the same name as outer local variable for block arguments or block local variables.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/ShadowingOuterLocalVariable"
  },
  {
    "key": "Lint/StructNewOverride",
    "name": "Struct New Override (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Disallow overriding the `Struct` built-in methods via `Struct.new`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/StructNewOverride"
  },
  {
    "key": "Lint/SuppressedException",
    "name": "Suppressed Exception (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Don't suppress exceptions.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/SuppressedException"
  },
  {
    "key": "Lint/SymbolConversion",
    "name": "Symbol Conversion (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for unnecessary symbol conversions.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/SymbolConversion"
  },
  {
    "key": "Lint/Syntax",
    "name": "Syntax (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for syntax errors.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/Syntax"
  },
  {
    "key": "Lint/ToEnumArguments",
    "name": "To Enum Arguments (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Ensures that `to_enum`/`enum_for`, called for the current method, has correct arguments.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/ToEnumArguments"
  },
  {
    "key": "Lint/ToJSON",
    "name": "To JSON (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Ensure #to_json includes an optional argument.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/ToJSON"
  },
  {
    "key": "Lint/TopLevelReturnWithArgument",
    "name": "Top Level Return With Argument (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Detects top level return statements with argument.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/TopLevelReturnWithArgument"
  },
  {
    "key": "Lint/TrailingCommaInAttributeDeclaration",
    "name": "Trailing Comma In Attribute Declaration (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for trailing commas in attribute declarations.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/TrailingCommaInAttributeDeclaration"
  },
  {
    "key": "Lint/TripleQuotes",
    "name": "Triple Quotes (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for useless triple quote constructs.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/TripleQuotes"
  },
  {
    "key": "Lint/UnderscorePrefixedVariableName",
    "name": "Underscore Prefixed Variable Name (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Do not use prefix `_` for a variable that is used.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/UnderscorePrefixedVariableName"
  },
  {
    "key": "Lint/UnexpectedBlockArity",
    "name": "Unexpected Block Arity (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Looks for blocks that have fewer arguments that the calling method expects.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/UnexpectedBlockArity"
  },
  {
    "key": "Lint/UnifiedInteger",
    "name": "Unified Integer (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Use Integer instead of Fixnum or Bignum.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/UnifiedInteger"
  },
  {
    "key": "Lint/UnmodifiedReduceAccumulator",
    "name": "Unmodified Reduce Accumulator (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for `reduce` or `inject` blocks that do not update the accumulator each iteration.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/UnmodifiedReduceAccumulator"
  },
  {
    "key": "Lint/UnreachableCode",
    "name": "Unreachable Code (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Unreachable code.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/UnreachableCode"
  },
  {
    "key": "Lint/UnreachableLoop",
    "name": "Unreachable Loop (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for loops that will have at most one iteration.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/UnreachableLoop"
  },
  {
    "key": "Lint/UnusedBlockArgument",
    "name": "Unused Block Argument (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for unused block arguments.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/UnusedBlockArgument"
  },
  {
    "key": "Lint/UnusedMethodArgument",
    "name": "Unused Method Argument (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for unused method arguments.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/UnusedMethodArgument"
  },
  {
    "key": "Lint/UriEscapeUnescape",
    "name": "Uri Escape Unescape (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "`URI.escape` method is obsolete and should not be used. Instead, use `CGI.escape`, `URI.encode_www_form` or `URI.encode_www_form_component` depending on your specific use case. Also `URI.unescape` method is obsolete and should not be used. Instead, use `CGI.unescape`, `URI.decode_www_form` or `URI.decode_www_form_component` depending on your specific use case.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/UriEscapeUnescape"
  },
  {
    "key": "Lint/UriRegexp",
    "name": "Uri Regexp (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Use `URI::DEFAULT_PARSER.make_regexp` instead of `URI.regexp`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/UriRegexp"
  },
  {
    "key": "Lint/UselessAccessModifier",
    "name": "Useless Access Modifier (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for useless access modifiers.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/UselessAccessModifier"
  },
  {
    "key": "Lint/UselessAssignment",
    "name": "Useless Assignment (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for useless assignment to a local variable.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/UselessAssignment"
  },
  {
    "key": "Lint/UselessElseWithoutRescue",
    "name": "Useless Else Without Rescue (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for useless `else` in `begin..end` without `rescue`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/UselessElseWithoutRescue"
  },
  {
    "key": "Lint/UselessMethodDefinition",
    "name": "Useless Method Definition (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for useless method definitions.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/UselessMethodDefinition"
  },
  {
    "key": "Lint/UselessRescue",
    "name": "Useless Rescue (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for useless `rescue`s.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/UselessRescue"
  },
  {
    "key": "Lint/UselessRuby2Keywords",
    "name": "Useless Ruby2 Keywords (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Finds unnecessary uses of `ruby2_keywords`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/UselessRuby2Keywords"
  },
  {
    "key": "Lint/UselessSetterCall",
    "name": "Useless Setter Call (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for useless setter call to a local variable.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/UselessSetterCall"
  },
  {
    "key": "Lint/UselessTimes",
    "name": "Useless Times (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Checks for useless `Integer#times` calls.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/UselessTimes"
  },
  {
    "key": "Lint/Void",
    "name": "Void (Lint)",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Possible use of operator/literal/variable in void context.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/Void"
  },
  {
    "key": "Metrics/AbcSize",
    "name": "Abc Size (Metrics)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "A calculated magnitude based on number of assignments, branches, and conditions.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Metrics/AbcSize"
  },
  {
    "key": "Metrics/BlockLength",
    "name": "Block Length (Metrics)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid long blocks with many lines.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Metrics/BlockLength"
  },
  {
    "key": "Metrics/BlockNesting",
    "name": "Block Nesting (Metrics)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid excessive block nesting.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Metrics/BlockNesting"
  },
  {
    "key": "Metrics/ClassLength",
    "name": "Class Length (Metrics)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid classes longer than 100 lines of code.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Metrics/ClassLength"
  },
  {
    "key": "Metrics/CollectionLiteralLength",
    "name": "Collection Literal Length (Metrics)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for `Array` or `Hash` literals with many entries.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Metrics/CollectionLiteralLength"
  },
  {
    "key": "Metrics/CyclomaticComplexity",
    "name": "Cyclomatic Complexity (Metrics)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "A complexity metric that is strongly correlated to the number of test cases needed to validate a method.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Metrics/CyclomaticComplexity"
  },
  {
    "key": "Metrics/MethodLength",
    "name": "Method Length (Metrics)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid methods longer than 10 lines of code.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Metrics/MethodLength"
  },
  {
    "key": "Metrics/ModuleLength",
    "name": "Module Length (Metrics)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid modules longer than 100 lines of code.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Metrics/ModuleLength"
  },
  {
    "key": "Metrics/ParameterLists",
    "name": "Parameter Lists (Metrics)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid parameter lists longer than three or four parameters.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Metrics/ParameterLists"
  },
  {
    "key": "Metrics/PerceivedComplexity",
    "name": "Perceived Complexity (Metrics)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "A complexity metric geared towards measuring complexity for a human reader.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Metrics/PerceivedComplexity"
  },
  {
    "key": "Migration/DepartmentName",
    "name": "Department Name (Migration)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Check that cop names in rubocop:disable (etc) comments are given with department name.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Migration/DepartmentName"
  },
  {
    "key": "Naming/AccessorMethodName",
    "name": "Accessor Method Name (Naming)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Check the naming of accessor methods for get_/set_.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Naming/AccessorMethodName"
  },
  {
    "key": "Naming/AsciiIdentifiers",
    "name": "Ascii Identifiers (Naming)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Use only ascii symbols in identifiers and constants.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Naming/AsciiIdentifiers"
  },
  {
    "key": "Naming/BinaryOperatorParameterName",
    "name": "Binary Operator Parameter Name (Naming)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "When defining binary operators, name the argument other.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Naming/BinaryOperatorParameterName"
  },
  {
    "key": "Naming/BlockForwarding",
    "name": "Block Forwarding (Naming)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Use anonymous block forwarding.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Naming/BlockForwarding"
  },
  {
    "key": "Naming/BlockParameterName",
    "name": "Block Parameter Name (Naming)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks for block parameter names that contain capital letters, end in numbers, or do not meet a minimal length.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Naming/BlockParameterName"
  },
  {
    "key": "Naming/ClassAndModuleCamelCase",
    "name": "Class And Module Camel Case (Naming)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Use CamelCase for classes and modules.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Naming/ClassAndModuleCamelCase"
  },
  {
    "key": "Naming/ConstantName",
    "name": "Constant Name (Naming)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Constants should use SCREAMING_SNAKE_CASE.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Naming/ConstantName"
  },
  {
    "key": "Naming/FileName",
    "name": "File Name (Naming)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Use snake_case for source file names.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Naming/FileName"
  },
  {
    "key": "Naming/HeredocDelimiterCase",
    "name": "Heredoc Delimiter Case (Naming)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Use configured case for heredoc delimiters.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Naming/HeredocDelimiterCase"
  },
  {
    "key": "Naming/HeredocDelimiterNaming",
    "name": "Heredoc Delimiter Naming (Naming)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Use descriptive heredoc delimiters.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Naming/HeredocDelimiterNaming"
  },
  {
    "key": "Naming/InclusiveLanguage",
    "name": "Inclusive Language (Naming)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Recommend the use of inclusive language instead of problematic terms.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Naming/InclusiveLanguage"
  },
  {
    "key": "Naming/MemoizedInstanceVariableName",
    "name": "Memoized Instance Variable Name (Naming)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Memoized method name should match memo instance variable name.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Naming/MemoizedInstanceVariableName"
  },
  {
    "key": "Naming/MethodName",
    "name": "Method Name (Naming)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Use the configured style when naming methods.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Naming/MethodName"
  },
  {
    "key": "Naming/MethodParameterName",
    "name": "Method Parameter Name (Naming)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks for method parameter names that contain capital letters, end in numbers, or do not meet a minimal length.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Naming/MethodParameterName"
  },
  {
    "key": "Naming/PredicateName",
    "name": "Predicate Name (Naming)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Check the names of predicate methods.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Naming/PredicateName"
  },
  {
    "key": "Naming/RescuedExceptionsVariableName",
    "name": "Rescued Exceptions Variable Name (Naming)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Use consistent rescued exceptions variables naming.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Naming/RescuedExceptionsVariableName"
  },
  {
    "key": "Naming/VariableName",
    "name": "Variable Name (Naming)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Use the configured style when naming variables.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Naming/VariableName"
  },
  {
    "key": "Naming/VariableNumber",
    "name": "Variable Number (Naming)",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Use the configured style when numbering symbols, methods and variables.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Naming/VariableNumber"
  },
  {
    "key": "Security/CompoundHash",
    "name": "Compound Hash (Security)",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "When overwriting Object#hash to combine values, prefer delegating to Array#hash over writing a custom implementation.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Security/CompoundHash"
  },
  {
    "key": "Security/Eval",
    "name": "Eval (Security)",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "The use of eval represents a serious security risk.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Security/Eval"
  },
  {
    "key": "Security/IoMethods",
    "name": "Io Methods (Security)",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "Checks for the first argument to `IO.read`, `IO.binread`, `IO.write`, `IO.binwrite`, `IO.foreach`, and `IO.readlines`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Security/IoMethods"
  },
  {
    "key": "Security/JSONLoad",
    "name": "JSONLoad (Security)",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "Prefer usage of `JSON.parse` over `JSON.load` due to potential security issues. See reference for more information.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Security/JSONLoad"
  },
  {
    "key": "Security/MarshalLoad",
    "name": "Marshal Load (Security)",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "Avoid using of `Marshal.load` or `Marshal.restore` due to potential security issues. See reference for more information.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Security/MarshalLoad"
  },
  {
    "key": "Security/Open",
    "name": "Open (Security)",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "The use of `Kernel#open` and `URI.open` represent a serious security risk.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Security/Open"
  },
  {
    "key": "Security/YAMLLoad",
    "name": "YAMLLoad (Security)",
    "type": "VULNERABILITY",
    "severity": "MAJOR",
    "description": "Prefer usage of `YAML.safe_load` over `YAML.load` due to potential security issues. See reference for more information.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Security/YAMLLoad"
  },
  {
    "key": "Style/AccessModifierDeclarations",
    "name": "Access Modifier Declarations (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks style of how access modifiers are used.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/AccessModifierDeclarations"
  },
  {
    "key": "Style/AccessorGrouping",
    "name": "Accessor Grouping (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for grouping of accessors in `class` and `module` bodies.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/AccessorGrouping"
  },
  {
    "key": "Style/Alias",
    "name": "Alias (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use alias instead of alias_method.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/Alias"
  },
  {
    "key": "Style/AndOr",
    "name": "And Or (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use &amp;&amp;/|| instead of and/or.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/AndOr"
  },
  {
    "key": "Style/ArgumentsForwarding",
    "name": "Arguments Forwarding (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use arguments forwarding.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ArgumentsForwarding"
  },
  {
    "key": "Style/ArrayCoercion",
    "name": "Array Coercion (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use Array() instead of explicit Array check or [*var], when dealing with a variable you want to treat as an Array, but you're not certain it's an array.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ArrayCoercion"
  },
  {
    "key": "Style/ArrayIntersect",
    "name": "Array Intersect (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use `array1.intersect?(array2)` instead of `(array1 &amp; array2).any?`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ArrayIntersect"
  },
  {
    "key": "Style/ArrayJoin",
    "name": "Array Join (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use Array#join instead of Array#*.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ArrayJoin"
  },
  {
    "key": "Style/AsciiComments",
    "name": "Ascii Comments (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use only ascii symbols in comments.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/AsciiComments"
  },
  {
    "key": "Style/Attr",
    "name": "Attr (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for uses of Module#attr.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/Attr"
  },
  {
    "key": "Style/AutoResourceCleanup",
    "name": "Auto Resource Cleanup (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Suggests the usage of an auto resource cleanup version of a method (if available).",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/AutoResourceCleanup"
  },
  {
    "key": "Style/BarePercentLiterals",
    "name": "Bare Percent Literals (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks if usage of %() or %Q() matches configuration.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/BarePercentLiterals"
  },
  {
    "key": "Style/BeginBlock",
    "name": "Begin Block (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid the use of BEGIN blocks.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/BeginBlock"
  },
  {
    "key": "Style/BisectedAttrAccessor",
    "name": "Bisected Attr Accessor (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for places where `attr_reader` and `attr_writer` for the same method can be combined into single `attr_accessor`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/BisectedAttrAccessor"
  },
  {
    "key": "Style/BlockComments",
    "name": "Block Comments (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Do not use block comments.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/BlockComments"
  },
  {
    "key": "Style/BlockDelimiters",
    "name": "Block Delimiters (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid using {...} for multi-line blocks (multiline chaining is always ugly). Prefer {...} over do...end for single-line blocks.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/BlockDelimiters"
  },
  {
    "key": "Style/CaseEquality",
    "name": "Case Equality (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid explicit use of the case equality operator(===).",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/CaseEquality"
  },
  {
    "key": "Style/CaseLikeIf",
    "name": "Case Like If (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Identifies places where `if-elsif` constructions can be replaced with `case-when`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/CaseLikeIf"
  },
  {
    "key": "Style/CharacterLiteral",
    "name": "Character Literal (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for uses of character literals.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/CharacterLiteral"
  },
  {
    "key": "Style/ClassAndModuleChildren",
    "name": "Class And Module Children (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks style of children classes and modules.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ClassAndModuleChildren"
  },
  {
    "key": "Style/ClassCheck",
    "name": "Class Check (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Enforces consistent use of `Object#is_a?` or `Object#kind_of?`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ClassCheck"
  },
  {
    "key": "Style/ClassEqualityComparison",
    "name": "Class Equality Comparison (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Enforces the use of `Object#instance_of?` instead of class comparison for equality.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ClassEqualityComparison"
  },
  {
    "key": "Style/ClassMethods",
    "name": "Class Methods (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use self when defining module/class methods.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ClassMethods"
  },
  {
    "key": "Style/ClassMethodsDefinitions",
    "name": "Class Methods Definitions (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Enforces using `def self.method_name` or `class &lt;&lt; self` to define class methods.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ClassMethodsDefinitions"
  },
  {
    "key": "Style/ClassVars",
    "name": "Class Vars (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid the use of class variables.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ClassVars"
  },
  {
    "key": "Style/CollectionCompact",
    "name": "Collection Compact (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use `{Array,Hash}#{compact,compact!}` instead of custom logic to reject nils.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/CollectionCompact"
  },
  {
    "key": "Style/CollectionMethods",
    "name": "Collection Methods (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Preferred collection methods.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/CollectionMethods"
  },
  {
    "key": "Style/ColonMethodCall",
    "name": "Colon Method Call (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Do not use :: for method call.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ColonMethodCall"
  },
  {
    "key": "Style/ColonMethodDefinition",
    "name": "Colon Method Definition (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Do not use :: for defining class methods.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ColonMethodDefinition"
  },
  {
    "key": "Style/CombinableLoops",
    "name": "Combinable Loops (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for places where multiple consecutive loops over the same data can be combined into a single loop.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/CombinableLoops"
  },
  {
    "key": "Style/CommandLiteral",
    "name": "Command Literal (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use `` or %x around command literals.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/CommandLiteral"
  },
  {
    "key": "Style/CommentAnnotation",
    "name": "Comment Annotation (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks formatting of special comments (TODO, FIXME, OPTIMIZE, HACK, REVIEW, NOTE).",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/CommentAnnotation"
  },
  {
    "key": "Style/CommentedKeyword",
    "name": "Commented Keyword (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Do not place comments on the same line as certain keywords.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/CommentedKeyword"
  },
  {
    "key": "Style/ComparableClamp",
    "name": "Comparable Clamp (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Enforces the use of `Comparable#clamp` instead of comparison by minimum and maximum.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ComparableClamp"
  },
  {
    "key": "Style/ConcatArrayLiterals",
    "name": "Concat Array Literals (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Enforces the use of `Array#push(item)` instead of `Array#concat([item])` to avoid redundant array literals.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ConcatArrayLiterals"
  },
  {
    "key": "Style/ConditionalAssignment",
    "name": "Conditional Assignment (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use the return value of `if` and `case` statements for assignment to a variable and variable comparison instead of assigning that variable inside of each branch.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ConditionalAssignment"
  },
  {
    "key": "Style/ConstantVisibility",
    "name": "Constant Visibility (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Check that class- and module constants have visibility declarations.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ConstantVisibility"
  },
  {
    "key": "Style/Copyright",
    "name": "Copyright (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Include a copyright notice in each file before any code.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/Copyright"
  },
  {
    "key": "Style/DataInheritance",
    "name": "Data Inheritance (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for inheritance from Data.define.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/DataInheritance"
  },
  {
    "key": "Style/DateTime",
    "name": "Date Time (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use Time over DateTime.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/DateTime"
  },
  {
    "key": "Style/DefWithParentheses",
    "name": "Def With Parentheses (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use def with parentheses when there are arguments.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/DefWithParentheses"
  },
  {
    "key": "Style/Dir",
    "name": "Dir (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use the `__dir__` method to retrieve the canonicalized absolute path to the current file.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/Dir"
  },
  {
    "key": "Style/DirEmpty",
    "name": "Dir Empty (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Prefer to use `Dir.empty?('path/to/dir')` when checking if a directory is empty.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/DirEmpty"
  },
  {
    "key": "Style/DisableCopsWithinSourceCodeDirective",
    "name": "Disable Cops Within Source Code Directive (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Forbids disabling/enabling cops within source code.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/DisableCopsWithinSourceCodeDirective"
  },
  {
    "key": "Style/DocumentDynamicEvalDefinition",
    "name": "Document Dynamic Eval Definition (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "When using `class_eval` (or other `eval`) with string interpolation, add a comment block showing its appearance if interpolated.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/DocumentDynamicEvalDefinition"
  },
  {
    "key": "Style/Documentation",
    "name": "Documentation (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Document classes and non-namespace modules.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/Documentation"
  },
  {
    "key": "Style/DocumentationMethod",
    "name": "Documentation Method (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for missing documentation comment for public methods.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/DocumentationMethod"
  },
  {
    "key": "Style/DoubleCopDisableDirective",
    "name": "Double Cop Disable Directive (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for double rubocop:disable comments on a single line.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/DoubleCopDisableDirective"
  },
  {
    "key": "Style/DoubleNegation",
    "name": "Double Negation (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for uses of double negation (!!).",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/DoubleNegation"
  },
  {
    "key": "Style/EachForSimpleLoop",
    "name": "Each For Simple Loop (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use `Integer#times` for a simple loop which iterates a fixed number of times.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/EachForSimpleLoop"
  },
  {
    "key": "Style/EachWithObject",
    "name": "Each With Object (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Prefer `each_with_object` over `inject` or `reduce`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/EachWithObject"
  },
  {
    "key": "Style/EmptyBlockParameter",
    "name": "Empty Block Parameter (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Omit pipes for empty block parameters.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/EmptyBlockParameter"
  },
  {
    "key": "Style/EmptyCaseCondition",
    "name": "Empty Case Condition (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid empty condition in case statements.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/EmptyCaseCondition"
  },
  {
    "key": "Style/EmptyElse",
    "name": "Empty Else (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid empty else-clauses.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/EmptyElse"
  },
  {
    "key": "Style/EmptyHeredoc",
    "name": "Empty Heredoc (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for using empty heredoc to reduce redundancy.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/EmptyHeredoc"
  },
  {
    "key": "Style/EmptyLambdaParameter",
    "name": "Empty Lambda Parameter (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Omit parens for empty lambda parameters.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/EmptyLambdaParameter"
  },
  {
    "key": "Style/EmptyLiteral",
    "name": "Empty Literal (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Prefer literals to Array.new/Hash.new/String.new.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/EmptyLiteral"
  },
  {
    "key": "Style/EmptyMethod",
    "name": "Empty Method (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks the formatting of empty method definitions.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/EmptyMethod"
  },
  {
    "key": "Style/Encoding",
    "name": "Encoding (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use UTF-8 as the source file encoding.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/Encoding"
  },
  {
    "key": "Style/EndBlock",
    "name": "End Block (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid the use of END blocks.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/EndBlock"
  },
  {
    "key": "Style/EndlessMethod",
    "name": "Endless Method (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid the use of multi-lined endless method definitions.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/EndlessMethod"
  },
  {
    "key": "Style/EnvHome",
    "name": "Env Home (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for consistent usage of `ENV['HOME']`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/EnvHome"
  },
  {
    "key": "Style/EvalWithLocation",
    "name": "Eval With Location (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Pass `__FILE__` and `__LINE__` to `eval` method, as they are used by backtraces.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/EvalWithLocation"
  },
  {
    "key": "Style/EvenOdd",
    "name": "Even Odd (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Favor the use of `Integer#even?` &amp;&amp; `Integer#odd?`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/EvenOdd"
  },
  {
    "key": "Style/ExactRegexpMatch",
    "name": "Exact Regexp Match (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for exact regexp match inside Regexp literals.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ExactRegexpMatch"
  },
  {
    "key": "Style/ExpandPathArguments",
    "name": "Expand Path Arguments (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use `expand_path(__dir__)` instead of `expand_path('..', __FILE__)`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ExpandPathArguments"
  },
  {
    "key": "Style/ExplicitBlockArgument",
    "name": "Explicit Block Argument (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Consider using explicit block argument to avoid writing block literal that just passes its arguments to another block.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ExplicitBlockArgument"
  },
  {
    "key": "Style/ExponentialNotation",
    "name": "Exponential Notation (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "When using exponential notation, favor a mantissa between 1 (inclusive) and 10 (exclusive).",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ExponentialNotation"
  },
  {
    "key": "Style/FetchEnvVar",
    "name": "Fetch Env Var (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Suggests `ENV.fetch` for the replacement of `ENV[]`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/FetchEnvVar"
  },
  {
    "key": "Style/FileEmpty",
    "name": "File Empty (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Prefer to use `File.empty?('path/to/file')` when checking if a file is empty.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/FileEmpty"
  },
  {
    "key": "Style/FileRead",
    "name": "File Read (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Favor `File.(bin)read` convenience methods.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/FileRead"
  },
  {
    "key": "Style/FileWrite",
    "name": "File Write (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Favor `File.(bin)write` convenience methods.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/FileWrite"
  },
  {
    "key": "Style/FloatDivision",
    "name": "Float Division (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "For performing float division, coerce one side only.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/FloatDivision"
  },
  {
    "key": "Style/For",
    "name": "For (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks use of for or each in multiline loops.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/For"
  },
  {
    "key": "Style/FormatString",
    "name": "Format String (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Enforce the use of Kernel#sprintf, Kernel#format or String#%.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/FormatString"
  },
  {
    "key": "Style/FormatStringToken",
    "name": "Format String Token (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use a consistent style for format string tokens.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/FormatStringToken"
  },
  {
    "key": "Style/FrozenStringLiteralComment",
    "name": "Frozen String Literal Comment (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Add the frozen_string_literal comment to the top of files to help transition to frozen string literals by default.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/FrozenStringLiteralComment"
  },
  {
    "key": "Style/GlobalStdStream",
    "name": "Global Std Stream (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Enforces the use of `$stdout/$stderr/$stdin` instead of `STDOUT/STDERR/STDIN`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/GlobalStdStream"
  },
  {
    "key": "Style/GlobalVars",
    "name": "Global Vars (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Do not introduce global variables.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/GlobalVars"
  },
  {
    "key": "Style/GuardClause",
    "name": "Guard Clause (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Check for conditionals that can be replaced with guard clauses.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/GuardClause"
  },
  {
    "key": "Style/HashAsLastArrayItem",
    "name": "Hash As Last Array Item (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for presence or absence of braces around hash literal as a last array item depending on configuration.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/HashAsLastArrayItem"
  },
  {
    "key": "Style/HashConversion",
    "name": "Hash Conversion (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid Hash[] in favor of ary.to_h or literal hashes.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/HashConversion"
  },
  {
    "key": "Style/HashEachMethods",
    "name": "Hash Each Methods (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use Hash#each_key and Hash#each_value.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/HashEachMethods"
  },
  {
    "key": "Style/HashExcept",
    "name": "Hash Except (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for usages of `Hash#reject`, `Hash#select`, and `Hash#filter` methods that can be replaced with `Hash#except` method.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/HashExcept"
  },
  {
    "key": "Style/HashLikeCase",
    "name": "Hash Like Case (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for places where `case-when` represents a simple 1:1 mapping and can be replaced with a hash lookup.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/HashLikeCase"
  },
  {
    "key": "Style/HashSyntax",
    "name": "Hash Syntax (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Prefer Ruby 1.9 hash syntax { a: 1, b: 2 } over 1.8 syntax { :a =&gt; 1, :b =&gt; 2 }.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/HashSyntax"
  },
  {
    "key": "Style/HashTransformKeys",
    "name": "Hash Transform Keys (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Prefer `transform_keys` over `each_with_object`, `map`, or `to_h`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/HashTransformKeys"
  },
  {
    "key": "Style/HashTransformValues",
    "name": "Hash Transform Values (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Prefer `transform_values` over `each_with_object`, `map`, or `to_h`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/HashTransformValues"
  },
  {
    "key": "Style/IdenticalConditionalBranches",
    "name": "Identical Conditional Branches (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks that conditional statements do not have an identical line at the end of each branch, which can validly be moved out of the conditional.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/IdenticalConditionalBranches"
  },
  {
    "key": "Style/IfInsideElse",
    "name": "If Inside Else (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Finds if nodes inside else, which can be converted to elsif.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/IfInsideElse"
  },
  {
    "key": "Style/IfUnlessModifier",
    "name": "If Unless Modifier (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Favor modifier if/unless usage when you have a single-line body.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/IfUnlessModifier"
  },
  {
    "key": "Style/IfUnlessModifierOfIfUnless",
    "name": "If Unless Modifier Of If Unless (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid modifier if/unless usage on conditionals.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/IfUnlessModifierOfIfUnless"
  },
  {
    "key": "Style/IfWithBooleanLiteralBranches",
    "name": "If With Boolean Literal Branches (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for redundant `if` with boolean literal branches.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/IfWithBooleanLiteralBranches"
  },
  {
    "key": "Style/IfWithSemicolon",
    "name": "If With Semicolon (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Do not use if x; .... Use the ternary operator instead.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/IfWithSemicolon"
  },
  {
    "key": "Style/ImplicitRuntimeError",
    "name": "Implicit Runtime Error (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use `raise` or `fail` with an explicit exception class and message, rather than just a message.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ImplicitRuntimeError"
  },
  {
    "key": "Style/InPatternThen",
    "name": "In Pattern Then (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for `in;` uses in `case` expressions.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/InPatternThen"
  },
  {
    "key": "Style/InfiniteLoop",
    "name": "Infinite Loop (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use Kernel#loop for infinite loops. This cop is unsafe if the body may raise a `StopIteration` exception.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/InfiniteLoop"
  },
  {
    "key": "Style/InlineComment",
    "name": "Inline Comment (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid trailing inline comments.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/InlineComment"
  },
  {
    "key": "Style/InverseMethods",
    "name": "Inverse Methods (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use the inverse method instead of `!.method` if an inverse method is defined.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/InverseMethods"
  },
  {
    "key": "Style/InvertibleUnlessCondition",
    "name": "Invertible Unless Condition (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Favor `if` with inverted condition over `unless`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/InvertibleUnlessCondition"
  },
  {
    "key": "Style/IpAddresses",
    "name": "Ip Addresses (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Don't include literal IP addresses in code.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/IpAddresses"
  },
  {
    "key": "Style/KeywordParametersOrder",
    "name": "Keyword Parameters Order (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Enforces that optional keyword parameters are placed at the end of the parameters list.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/KeywordParametersOrder"
  },
  {
    "key": "Style/Lambda",
    "name": "Lambda (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use the new lambda literal syntax for single-line blocks.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/Lambda"
  },
  {
    "key": "Style/LambdaCall",
    "name": "Lambda Call (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use lambda.call(...) instead of lambda.(...).",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/LambdaCall"
  },
  {
    "key": "Style/LineEndConcatenation",
    "name": "Line End Concatenation (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use \\ instead of + or &lt;&lt; to concatenate two string literals at line end.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/LineEndConcatenation"
  },
  {
    "key": "Style/MagicCommentFormat",
    "name": "Magic Comment Format (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use a consistent style for magic comments.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MagicCommentFormat"
  },
  {
    "key": "Style/MapCompactWithConditionalBlock",
    "name": "Map Compact With Conditional Block (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Prefer `select` or `reject` over `map { ... }.compact`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MapCompactWithConditionalBlock"
  },
  {
    "key": "Style/MapToHash",
    "name": "Map To Hash (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Prefer `to_h` with a block over `map.to_h`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MapToHash"
  },
  {
    "key": "Style/MapToSet",
    "name": "Map To Set (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Prefer `to_set` with a block over `map.to_set`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MapToSet"
  },
  {
    "key": "Style/MethodCallWithArgsParentheses",
    "name": "Method Call With Args Parentheses (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use parentheses for method calls with arguments.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MethodCallWithArgsParentheses"
  },
  {
    "key": "Style/MethodCallWithoutArgsParentheses",
    "name": "Method Call Without Args Parentheses (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Do not use parentheses for method calls with no arguments.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MethodCallWithoutArgsParentheses"
  },
  {
    "key": "Style/MethodCalledOnDoEndBlock",
    "name": "Method Called On Do End Block (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid chaining a method call on a do...end block.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MethodCalledOnDoEndBlock"
  },
  {
    "key": "Style/MethodDefParentheses",
    "name": "Method Def Parentheses (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks if the method definitions have or don't have parentheses.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MethodDefParentheses"
  },
  {
    "key": "Style/MinMax",
    "name": "Min Max (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use `Enumerable#minmax` instead of `Enumerable#min` and `Enumerable#max` in conjunction.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MinMax"
  },
  {
    "key": "Style/MinMaxComparison",
    "name": "Min Max Comparison (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Enforces the use of `max` or `min` instead of comparison for greater or less.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MinMaxComparison"
  },
  {
    "key": "Style/MissingElse",
    "name": "Missing Else (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Require if/case expressions to have an else branches. If enabled, it is recommended that Style/UnlessElse and Style/EmptyElse be enabled. This will conflict with Style/EmptyElse if Style/EmptyElse is configured to style &quot;both&quot;.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MissingElse"
  },
  {
    "key": "Style/MissingRespondToMissing",
    "name": "Missing Respond To Missing (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks if `method_missing` is implemented without implementing `respond_to_missing`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MissingRespondToMissing"
  },
  {
    "key": "Style/MixinGrouping",
    "name": "Mixin Grouping (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for grouping of mixins in `class` and `module` bodies.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MixinGrouping"
  },
  {
    "key": "Style/MixinUsage",
    "name": "Mixin Usage (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks that `include`, `extend` and `prepend` exists at the top level.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MixinUsage"
  },
  {
    "key": "Style/ModuleFunction",
    "name": "Module Function (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for usage of `extend self` in modules.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ModuleFunction"
  },
  {
    "key": "Style/MultilineBlockChain",
    "name": "Multiline Block Chain (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid multi-line chains of blocks.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MultilineBlockChain"
  },
  {
    "key": "Style/MultilineIfModifier",
    "name": "Multiline If Modifier (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Only use if/unless modifiers on single line statements.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MultilineIfModifier"
  },
  {
    "key": "Style/MultilineIfThen",
    "name": "Multiline If Then (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Do not use then for multi-line if/unless.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MultilineIfThen"
  },
  {
    "key": "Style/MultilineInPatternThen",
    "name": "Multiline In Pattern Then (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Do not use `then` for multi-line `in` statement.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MultilineInPatternThen"
  },
  {
    "key": "Style/MultilineMemoization",
    "name": "Multiline Memoization (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Wrap multiline memoizations in a `begin` and `end` block.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MultilineMemoization"
  },
  {
    "key": "Style/MultilineMethodSignature",
    "name": "Multiline Method Signature (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid multi-line method signatures.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MultilineMethodSignature"
  },
  {
    "key": "Style/MultilineTernaryOperator",
    "name": "Multiline Ternary Operator (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid multi-line ?: (the ternary operator); use if/unless instead.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MultilineTernaryOperator"
  },
  {
    "key": "Style/MultilineWhenThen",
    "name": "Multiline When Then (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Do not use then for multi-line when statement.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MultilineWhenThen"
  },
  {
    "key": "Style/MultipleComparison",
    "name": "Multiple Comparison (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid comparing a variable with multiple items in a conditional, use Array#include? instead.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MultipleComparison"
  },
  {
    "key": "Style/MutableConstant",
    "name": "Mutable Constant (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Do not assign mutable objects to constants.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MutableConstant"
  },
  {
    "key": "Style/NegatedIf",
    "name": "Negated If (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Favor unless over if for negative conditions (or control flow or).",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/NegatedIf"
  },
  {
    "key": "Style/NegatedIfElseCondition",
    "name": "Negated If Else Condition (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for uses of `if-else` and ternary operators with a negated condition which can be simplified by inverting condition and swapping branches.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/NegatedIfElseCondition"
  },
  {
    "key": "Style/NegatedUnless",
    "name": "Negated Unless (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Favor if over unless for negative conditions.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/NegatedUnless"
  },
  {
    "key": "Style/NegatedWhile",
    "name": "Negated While (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Favor until over while for negative conditions.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/NegatedWhile"
  },
  {
    "key": "Style/NestedFileDirname",
    "name": "Nested File Dirname (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for nested `File.dirname`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/NestedFileDirname"
  },
  {
    "key": "Style/NestedModifier",
    "name": "Nested Modifier (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid using nested modifiers.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/NestedModifier"
  },
  {
    "key": "Style/NestedParenthesizedCalls",
    "name": "Nested Parenthesized Calls (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Parenthesize method calls which are nested inside the argument list of another parenthesized method call.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/NestedParenthesizedCalls"
  },
  {
    "key": "Style/NestedTernaryOperator",
    "name": "Nested Ternary Operator (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use one expression per branch in a ternary operator.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/NestedTernaryOperator"
  },
  {
    "key": "Style/Next",
    "name": "Next (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use `next` to skip iteration instead of a condition at the end.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/Next"
  },
  {
    "key": "Style/NilComparison",
    "name": "Nil Comparison (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Prefer x.nil? to x == nil.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/NilComparison"
  },
  {
    "key": "Style/NilLambda",
    "name": "Nil Lambda (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Prefer `-&gt; {}` to `-&gt; { nil }`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/NilLambda"
  },
  {
    "key": "Style/NonNilCheck",
    "name": "Non Nil Check (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for redundant nil checks.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/NonNilCheck"
  },
  {
    "key": "Style/Not",
    "name": "Not (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use ! instead of not.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/Not"
  },
  {
    "key": "Style/NumberedParameters",
    "name": "Numbered Parameters (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Restrict the usage of numbered parameters.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/NumberedParameters"
  },
  {
    "key": "Style/NumberedParametersLimit",
    "name": "Numbered Parameters Limit (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid excessive numbered params in a single block.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/NumberedParametersLimit"
  },
  {
    "key": "Style/NumericLiteralPrefix",
    "name": "Numeric Literal Prefix (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use smallcase prefixes for numeric literals.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/NumericLiteralPrefix"
  },
  {
    "key": "Style/NumericLiterals",
    "name": "Numeric Literals (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Add underscores to large numeric literals to improve their readability.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/NumericLiterals"
  },
  {
    "key": "Style/NumericPredicate",
    "name": "Numeric Predicate (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for the use of predicate- or comparison methods for numeric comparisons.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/NumericPredicate"
  },
  {
    "key": "Style/ObjectThen",
    "name": "Object Then (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Enforces the use of consistent method names `Object#yield_self` or `Object#then`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ObjectThen"
  },
  {
    "key": "Style/OneLineConditional",
    "name": "One Line Conditional (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Favor the ternary operator (?:) or multi-line constructs over single-line if/then/else/end constructs.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/OneLineConditional"
  },
  {
    "key": "Style/OpenStructUse",
    "name": "Open Struct Use (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid using OpenStruct. As of Ruby 3.0, use is officially discouraged due to performance, version compatibility, and potential security issues.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/OpenStructUse"
  },
  {
    "key": "Style/OperatorMethodCall",
    "name": "Operator Method Call (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for redundant dot before operator method call.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/OperatorMethodCall"
  },
  {
    "key": "Style/OptionHash",
    "name": "Option Hash (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Don't use option hashes when you can use keyword arguments.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/OptionHash"
  },
  {
    "key": "Style/OptionalArguments",
    "name": "Optional Arguments (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for optional arguments that do not appear at the end of the argument list.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/OptionalArguments"
  },
  {
    "key": "Style/OptionalBooleanParameter",
    "name": "Optional Boolean Parameter (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use keyword arguments when defining method with boolean argument.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/OptionalBooleanParameter"
  },
  {
    "key": "Style/OrAssignment",
    "name": "Or Assignment (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Recommend usage of double pipe equals (||=) where applicable.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/OrAssignment"
  },
  {
    "key": "Style/ParallelAssignment",
    "name": "Parallel Assignment (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Check for simple usages of parallel assignment. It will only warn when the number of variables matches on both sides of the assignment.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ParallelAssignment"
  },
  {
    "key": "Style/ParenthesesAroundCondition",
    "name": "Parentheses Around Condition (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Don't use parentheses around the condition of an if/unless/while.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ParenthesesAroundCondition"
  },
  {
    "key": "Style/PercentLiteralDelimiters",
    "name": "Percent Literal Delimiters (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use `%`-literal delimiters consistently.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/PercentLiteralDelimiters"
  },
  {
    "key": "Style/PercentQLiterals",
    "name": "Percent QLiterals (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks if uses of %Q/%q match the configured preference.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/PercentQLiterals"
  },
  {
    "key": "Style/PerlBackrefs",
    "name": "Perl Backrefs (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid Perl-style regex back references.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/PerlBackrefs"
  },
  {
    "key": "Style/PreferredHashMethods",
    "name": "Preferred Hash Methods (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks use of `has_key?` and `has_value?` Hash methods.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/PreferredHashMethods"
  },
  {
    "key": "Style/Proc",
    "name": "Proc (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use proc instead of Proc.new.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/Proc"
  },
  {
    "key": "Style/QuotedSymbols",
    "name": "Quoted Symbols (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use a consistent style for quoted symbols.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/QuotedSymbols"
  },
  {
    "key": "Style/RaiseArgs",
    "name": "Raise Args (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks the arguments passed to raise/fail.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RaiseArgs"
  },
  {
    "key": "Style/RandomWithOffset",
    "name": "Random With Offset (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Prefer to use ranges when generating random numbers instead of integers with offsets.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RandomWithOffset"
  },
  {
    "key": "Style/RedundantArgument",
    "name": "Redundant Argument (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Check for a redundant argument passed to certain methods.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantArgument"
  },
  {
    "key": "Style/RedundantArrayConstructor",
    "name": "Redundant Array Constructor (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for the instantiation of array using redundant `Array` constructor.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantArrayConstructor"
  },
  {
    "key": "Style/RedundantAssignment",
    "name": "Redundant Assignment (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for redundant assignment before returning.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantAssignment"
  },
  {
    "key": "Style/RedundantBegin",
    "name": "Redundant Begin (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Don't use begin blocks when they are not needed.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantBegin"
  },
  {
    "key": "Style/RedundantCapitalW",
    "name": "Redundant Capital W (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for %W when interpolation is not needed.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantCapitalW"
  },
  {
    "key": "Style/RedundantCondition",
    "name": "Redundant Condition (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for unnecessary conditional expressions.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantCondition"
  },
  {
    "key": "Style/RedundantConditional",
    "name": "Redundant Conditional (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Don't return true/false from a conditional.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantConditional"
  },
  {
    "key": "Style/RedundantConstantBase",
    "name": "Redundant Constant Base (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid redundant `::` prefix on constant.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantConstantBase"
  },
  {
    "key": "Style/RedundantCurrentDirectoryInPath",
    "name": "Redundant Current Directory In Path (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for uses a redundant current directory in path.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantCurrentDirectoryInPath"
  },
  {
    "key": "Style/RedundantDoubleSplatHashBraces",
    "name": "Redundant Double Splat Hash Braces (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for redundant uses of double splat hash braces.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantDoubleSplatHashBraces"
  },
  {
    "key": "Style/RedundantEach",
    "name": "Redundant Each (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for redundant `each`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantEach"
  },
  {
    "key": "Style/RedundantException",
    "name": "Redundant Exception (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for an obsolete RuntimeException argument in raise/fail.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantException"
  },
  {
    "key": "Style/RedundantFetchBlock",
    "name": "Redundant Fetch Block (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use `fetch(key, value)` instead of `fetch(key) { value }` when value has Numeric, Rational, Complex, Symbol or String type, `false`, `true`, `nil` or is a constant.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantFetchBlock"
  },
  {
    "key": "Style/RedundantFileExtensionInRequire",
    "name": "Redundant File Extension In Require (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for the presence of superfluous `.rb` extension in the filename provided to `require` and `require_relative`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantFileExtensionInRequire"
  },
  {
    "key": "Style/RedundantFilterChain",
    "name": "Redundant Filter Chain (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Identifies usages of `any?`, `empty?`, `none?` or `one?` predicate methods chained to `select`/`filter`/`find_all` and change them to use predicate method instead.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantFilterChain"
  },
  {
    "key": "Style/RedundantFreeze",
    "name": "Redundant Freeze (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks usages of Object#freeze on immutable objects.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantFreeze"
  },
  {
    "key": "Style/RedundantHeredocDelimiterQuotes",
    "name": "Redundant Heredoc Delimiter Quotes (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for redundant heredoc delimiter quotes.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantHeredocDelimiterQuotes"
  },
  {
    "key": "Style/RedundantInitialize",
    "name": "Redundant Initialize (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for redundant `initialize` methods.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantInitialize"
  },
  {
    "key": "Style/RedundantInterpolation",
    "name": "Redundant Interpolation (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for strings that are just an interpolated expression.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantInterpolation"
  },
  {
    "key": "Style/RedundantLineContinuation",
    "name": "Redundant Line Continuation (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Check for redundant line continuation.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantLineContinuation"
  },
  {
    "key": "Style/RedundantParentheses",
    "name": "Redundant Parentheses (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for parentheses that seem not to serve any purpose.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantParentheses"
  },
  {
    "key": "Style/RedundantPercentQ",
    "name": "Redundant Percent Q (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for %q/%Q when single quotes or double quotes would do.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantPercentQ"
  },
  {
    "key": "Style/RedundantRegexpArgument",
    "name": "Redundant Regexp Argument (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Identifies places where argument can be replaced from a deterministic regexp to a string.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantRegexpArgument"
  },
  {
    "key": "Style/RedundantRegexpCharacterClass",
    "name": "Redundant Regexp Character Class (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for unnecessary single-element Regexp character classes.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantRegexpCharacterClass"
  },
  {
    "key": "Style/RedundantRegexpConstructor",
    "name": "Redundant Regexp Constructor (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for the instantiation of regexp using redundant `Regexp.new` or `Regexp.compile`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantRegexpConstructor"
  },
  {
    "key": "Style/RedundantRegexpEscape",
    "name": "Redundant Regexp Escape (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for redundant escapes in Regexps.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantRegexpEscape"
  },
  {
    "key": "Style/RedundantReturn",
    "name": "Redundant Return (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Don't use return where it's not required.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantReturn"
  },
  {
    "key": "Style/RedundantSelf",
    "name": "Redundant Self (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Don't use self where it's not needed.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantSelf"
  },
  {
    "key": "Style/RedundantSelfAssignment",
    "name": "Redundant Self Assignment (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for places where redundant assignments are made for in place modification methods.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantSelfAssignment"
  },
  {
    "key": "Style/RedundantSelfAssignmentBranch",
    "name": "Redundant Self Assignment Branch (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for places where conditional branch makes redundant self-assignment.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantSelfAssignmentBranch"
  },
  {
    "key": "Style/RedundantSort",
    "name": "Redundant Sort (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use `min` instead of `sort.first`, `max_by` instead of `sort_by...last`, etc.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantSort"
  },
  {
    "key": "Style/RedundantSortBy",
    "name": "Redundant Sort By (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use `sort` instead of `sort_by { |x| x }`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantSortBy"
  },
  {
    "key": "Style/RedundantStringEscape",
    "name": "Redundant String Escape (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for redundant escapes in string literals.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RedundantStringEscape"
  },
  {
    "key": "Style/RegexpLiteral",
    "name": "Regexp Literal (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use / or %r around regular expressions.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RegexpLiteral"
  },
  {
    "key": "Style/RequireOrder",
    "name": "Require Order (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Sort `require` and `require_relative` in alphabetical order.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RequireOrder"
  },
  {
    "key": "Style/RescueModifier",
    "name": "Rescue Modifier (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid using rescue in its modifier form.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RescueModifier"
  },
  {
    "key": "Style/RescueStandardError",
    "name": "Rescue Standard Error (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid rescuing without specifying an error class.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/RescueStandardError"
  },
  {
    "key": "Style/ReturnNil",
    "name": "Return Nil (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use return instead of return nil.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ReturnNil"
  },
  {
    "key": "Style/ReturnNilInPredicateMethodDefinition",
    "name": "Return Nil In Predicate Method Definition (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks if uses of `return` or `return nil` in predicate method definition.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ReturnNilInPredicateMethodDefinition"
  },
  {
    "key": "Style/SafeNavigation",
    "name": "Safe Navigation (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Transforms usages of a method call safeguarded by a check for the existence of the object to safe navigation (`&amp;.`). Autocorrection is unsafe as it assumes the object will be `nil` or truthy, but never `false`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/SafeNavigation"
  },
  {
    "key": "Style/Sample",
    "name": "Sample (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use `sample` instead of `shuffle.first`, `shuffle.last`, and `shuffle[Integer]`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/Sample"
  },
  {
    "key": "Style/SelectByRegexp",
    "name": "Select By Regexp (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Prefer grep/grep_v to select/reject with a regexp match.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/SelectByRegexp"
  },
  {
    "key": "Style/SelfAssignment",
    "name": "Self Assignment (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for places where self-assignment shorthand should have been used.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/SelfAssignment"
  },
  {
    "key": "Style/Semicolon",
    "name": "Semicolon (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Don't use semicolons to terminate expressions.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/Semicolon"
  },
  {
    "key": "Style/Send",
    "name": "Send (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Prefer `Object#__send__` or `Object#public_send` to `send`, as `send` may overlap with existing methods.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/Send"
  },
  {
    "key": "Style/SignalException",
    "name": "Signal Exception (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for proper usage of fail and raise.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/SignalException"
  },
  {
    "key": "Style/SingleArgumentDig",
    "name": "Single Argument Dig (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid using single argument dig method.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/SingleArgumentDig"
  },
  {
    "key": "Style/SingleLineBlockParams",
    "name": "Single Line Block Params (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Enforces the names of some block params.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/SingleLineBlockParams"
  },
  {
    "key": "Style/SingleLineMethods",
    "name": "Single Line Methods (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid single-line methods.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/SingleLineMethods"
  },
  {
    "key": "Style/SlicingWithRange",
    "name": "Slicing With Range (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks array slicing is done with endless ranges when suitable.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/SlicingWithRange"
  },
  {
    "key": "Style/SoleNestedConditional",
    "name": "Sole Nested Conditional (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Finds sole nested conditional nodes which can be merged into outer conditional node.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/SoleNestedConditional"
  },
  {
    "key": "Style/SpecialGlobalVars",
    "name": "Special Global Vars (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid Perl-style global variables.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/SpecialGlobalVars"
  },
  {
    "key": "Style/StabbyLambdaParentheses",
    "name": "Stabby Lambda Parentheses (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Check for the usage of parentheses around stabby lambda arguments.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/StabbyLambdaParentheses"
  },
  {
    "key": "Style/StaticClass",
    "name": "Static Class (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Prefer modules to classes with only class methods.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/StaticClass"
  },
  {
    "key": "Style/StderrPuts",
    "name": "Stderr Puts (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use `warn` instead of `$stderr.puts`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/StderrPuts"
  },
  {
    "key": "Style/StringChars",
    "name": "String Chars (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for uses of `String#split` with empty string or regexp literal argument.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/StringChars"
  },
  {
    "key": "Style/StringConcatenation",
    "name": "String Concatenation (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for places where string concatenation can be replaced with string interpolation.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/StringConcatenation"
  },
  {
    "key": "Style/StringHashKeys",
    "name": "String Hash Keys (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Prefer symbols instead of strings as hash keys.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/StringHashKeys"
  },
  {
    "key": "Style/StringLiterals",
    "name": "String Literals (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks if uses of quotes match the configured preference.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/StringLiterals"
  },
  {
    "key": "Style/StringLiteralsInInterpolation",
    "name": "String Literals In Interpolation (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks if uses of quotes inside expressions in interpolated strings match the configured preference.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/StringLiteralsInInterpolation"
  },
  {
    "key": "Style/StringMethods",
    "name": "String Methods (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks if configured preferred methods are used over non-preferred.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/StringMethods"
  },
  {
    "key": "Style/Strip",
    "name": "Strip (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use `strip` instead of `lstrip.rstrip`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/Strip"
  },
  {
    "key": "Style/StructInheritance",
    "name": "Struct Inheritance (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for inheritance from Struct.new.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/StructInheritance"
  },
  {
    "key": "Style/SwapValues",
    "name": "Swap Values (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Enforces the use of shorthand-style swapping of 2 variables.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/SwapValues"
  },
  {
    "key": "Style/SymbolArray",
    "name": "Symbol Array (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use %i or %I for arrays of symbols.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/SymbolArray"
  },
  {
    "key": "Style/SymbolLiteral",
    "name": "Symbol Literal (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use plain symbols instead of string symbols when possible.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/SymbolLiteral"
  },
  {
    "key": "Style/SymbolProc",
    "name": "Symbol Proc (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use symbols as procs instead of blocks when possible.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/SymbolProc"
  },
  {
    "key": "Style/TernaryParentheses",
    "name": "Ternary Parentheses (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for use of parentheses around ternary conditions.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/TernaryParentheses"
  },
  {
    "key": "Style/TopLevelMethodDefinition",
    "name": "Top Level Method Definition (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Looks for top-level method definitions.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/TopLevelMethodDefinition"
  },
  {
    "key": "Style/TrailingBodyOnClass",
    "name": "Trailing Body On Class (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Class body goes below class statement.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/TrailingBodyOnClass"
  },
  {
    "key": "Style/TrailingBodyOnMethodDefinition",
    "name": "Trailing Body On Method Definition (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Method body goes below definition.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/TrailingBodyOnMethodDefinition"
  },
  {
    "key": "Style/TrailingBodyOnModule",
    "name": "Trailing Body On Module (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Module body goes below module statement.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/TrailingBodyOnModule"
  },
  {
    "key": "Style/TrailingCommaInArguments",
    "name": "Trailing Comma In Arguments (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for trailing comma in argument lists.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/TrailingCommaInArguments"
  },
  {
    "key": "Style/TrailingCommaInArrayLiteral",
    "name": "Trailing Comma In Array Literal (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for trailing comma in array literals.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/TrailingCommaInArrayLiteral"
  },
  {
    "key": "Style/TrailingCommaInBlockArgs",
    "name": "Trailing Comma In Block Args (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for useless trailing commas in block arguments.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/TrailingCommaInBlockArgs"
  },
  {
    "key": "Style/TrailingCommaInHashLiteral",
    "name": "Trailing Comma In Hash Literal (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for trailing comma in hash literals.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/TrailingCommaInHashLiteral"
  },
  {
    "key": "Style/TrailingMethodEndStatement",
    "name": "Trailing Method End Statement (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for trailing end statement on line of method body.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/TrailingMethodEndStatement"
  },
  {
    "key": "Style/TrailingUnderscoreVariable",
    "name": "Trailing Underscore Variable (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for the usage of unneeded trailing underscores at the end of parallel variable assignment.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/TrailingUnderscoreVariable"
  },
  {
    "key": "Style/TrivialAccessors",
    "name": "Trivial Accessors (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Prefer attr_* methods to trivial readers/writers.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/TrivialAccessors"
  },
  {
    "key": "Style/UnlessElse",
    "name": "Unless Else (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Do not use unless with else. Rewrite these with the positive case first.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/UnlessElse"
  },
  {
    "key": "Style/UnlessLogicalOperators",
    "name": "Unless Logical Operators (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for use of logical operators in an unless condition.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/UnlessLogicalOperators"
  },
  {
    "key": "Style/UnpackFirst",
    "name": "Unpack First (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for accessing the first element of `String#unpack` instead of using `unpack1`.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/UnpackFirst"
  },
  {
    "key": "Style/VariableInterpolation",
    "name": "Variable Interpolation (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Don't interpolate global, instance and class variables directly in strings.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/VariableInterpolation"
  },
  {
    "key": "Style/WhenThen",
    "name": "When Then (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use when x then ... for one-line cases.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/WhenThen"
  },
  {
    "key": "Style/WhileUntilDo",
    "name": "While Until Do (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for redundant do after while or until.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/WhileUntilDo"
  },
  {
    "key": "Style/WhileUntilModifier",
    "name": "While Until Modifier (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Favor modifier while/until usage when you have a single-line body.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/WhileUntilModifier"
  },
  {
    "key": "Style/WordArray",
    "name": "Word Array (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use %w or %W for arrays of words.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/WordArray"
  },
  {
    "key": "Style/YAMLFileRead",
    "name": "YAMLFile Read (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks for the use of `YAML.load`, `YAML.safe_load`, and `YAML.parse` with `File.read` argument.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/YAMLFileRead"
  },
  {
    "key": "Style/YodaCondition",
    "name": "Yoda Condition (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Forbid or enforce yoda conditions.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/YodaCondition"
  },
  {
    "key": "Style/YodaExpression",
    "name": "Yoda Expression (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Forbid the use of yoda expressions.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/YodaExpression"
  },
  {
    "key": "Style/ZeroLengthPredicate",
    "name": "Zero Length Predicate (Style)",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Use #empty? when testing for objects of length 0.",
    "url": "https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/ZeroLengthPredicate"
  }
]
