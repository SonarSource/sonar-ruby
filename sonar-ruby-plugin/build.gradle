buildscript{
    // This block is added to work around dependency issues with the aging JRuby plugin.
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        // The JRuby plugin requires grolifant version 0.12. This has become unavailable,
        // however, we can substitute it with version 0.12.1.
        classpath('org.ysb33r.gradle:grolifant:0.17.0')
    }

    // Workaround for missing transitive dependency on okhttp-digest-1.10.
    // https://github.com/rburgst/okhttp-digest/issues/86#issuecomment-2240821581
    configurations.classpath {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'com.burgstaller' && details.requested.name == 'okhttp-digest' && details.requested.version == '1.10') {
                details.useTarget "io.github.rburgst:${details.requested.name}:1.21"
                details.because 'Dependency has moved'
            }
        }
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    id 'com.github.jruby-gradle.jar' version '2.0.2'
}

import com.github.jrubygradle.JRubyPrepare

ext {
    rubygemsRaccVersion = '1.8.1-java'
    rubygemsAstVersion = '2.4.2'
    rubygemsParserVersion = '3.3.4.2'
}

processResources.duplicatesStrategy = DuplicatesStrategy.INCLUDE
processResources.from("src/main/resources", "${buildDir}/dependency_gems/gems")

dependencies {
    compileOnly libs.sonar.plugin.api

    implementation libs.sonar.analyzer.commons
    implementation libs.slang.plugin
    implementation libs.slang.checks
    implementation libs.slang.api
    implementation project(path: ':jruby-repackaged', configuration: 'shadow')
    // The plugin "com.github.jruby-gradle.jar" is broken and not anymore maintained.
    // For example, given the following definition:
    //   gems "rubygems:racc:1.5.2-java"
    // The plugin will try to download the dependency from:
    //   http://rubygems-proxy.torquebox.org/releases/rubygems/racc/1.5.2/racc-1.5.2-java.pom
    // But "rubygems-proxy.torquebox.org" server does not exist anymore.
    // The bellow function "downloadFromRubygems" is a workaround to this problem
    gems files("${buildDir}/rubygems_downloads/racc-${rubygemsRaccVersion}.gem")
    gems files("${buildDir}/rubygems_downloads/ast-${rubygemsAstVersion}.gem")
    gems files("${buildDir}/rubygems_downloads/parser-${rubygemsParserVersion}.gem")

    testImplementation testLibs.slang.antlr
    testImplementation testLibs.assertj.core
    testImplementation testLibs.mockito.core
    testImplementation testLibs.slang.testing
    testImplementation testLibs.junit.jupiter.api
    testImplementation testLibs.sonar.plugin.api.impl
    testImplementation testLibs.sonar.plugin.api.test.fixtures

    testRuntimeOnly testLibs.junit.jupiter.engine
}

task downloadFromRubygems(type: Task) {
    doLast {
        configurations.gems
          .findAll { !it.exists() }
          .forEach { file ->
              try {
                  file.getParentFile().mkdirs()
                  new URL("https://rubygems.org/downloads/${file.getName()}")
                    .withInputStream { input -> file.withOutputStream { output -> output << input } }
              } catch (IOException e) {
                  throw new RuntimeException("Failed to download ${file.getName()}", e)
              }
          }
    }
}

task unpackDependencyGems(type: JRubyPrepare) {
    outputDir "${buildDir}/dependency_gems"
    dependencies configurations.gems
}
task copyGemsJarsFromDirectoryToShadowBugWorkaroundJar(type: Jar) {
    from "${buildDir}/dependency_gems/gems"
    includes = ['**/*.jar']
    destinationDirectory = file("${buildDir}/tmp")
    archiveFileName = "shadowBugWorkaround.jar"
}

unpackDependencyGems.dependsOn downloadFromRubygems
copyGemsJarsFromDirectoryToShadowBugWorkaroundJar.dependsOn unpackDependencyGems
processResources.dependsOn copyGemsJarsFromDirectoryToShadowBugWorkaroundJar

tasks.register('checkRubyLicenseHeader') {
    // This task facilitates a rudimentary check of the license header in Ruby files.
    // If the license header is missing or outdated, the task will fail. It will not check that the correct license is used in the header.

    doLast {
        def rubyFiles = fileTree(dir: project.projectDir, include: 'src/main/**/*.rb')
        def currentYear = Calendar.getInstance().get(Calendar.YEAR)
        def filesWithOutdatedOrInvalidHeader = []

        rubyFiles.each { file ->
            def matcher = file.text =~ /Copyright \(C\) \d{4}-(\d{4}) SonarSource/
            if (!matcher || matcher[0][1] != currentYear.toString()) {
                filesWithOutdatedOrInvalidHeader << file
            }
        }

        if (!filesWithOutdatedOrInvalidHeader.isEmpty()) {
            throw new GradleException(
                    "License header is invalid or outdated in the following files: ${filesWithOutdatedOrInvalidHeader.join(', ')}")
        }
    }
}

tasks.register('updateRubyLicenseHeader') {
    // This task is used to update the dates in existing license headers in Ruby files. It does not add a license header if it is missing.

    doLast {
        def rubyFiles = fileTree(dir: project.projectDir, include: 'src/main/**/*.rb')
        // Replace the year range in the license header using regex to make sure it ends in the current year
        def currentYear = Calendar.getInstance().get(Calendar.YEAR)

        rubyFiles.each { file ->
            file.write file.text.replaceFirst(/(Copyright \(C\) \d{4}-)\d{4}/, {
                return "${it[1]}${currentYear}"
            })
        }
    }
}

tasks.spotlessApply.dependsOn updateRubyLicenseHeader
tasks.spotlessCheck.dependsOn checkRubyLicenseHeader

jar {
    manifest {
        def displayVersion = (project.buildNumber == null ? project.version : project.version.substring(0, project.version.lastIndexOf('.')) + " (build ${project.buildNumber})")
        def buildDate = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        attributes(
                'Build-Time': buildDate,
                'Implementation-Build': 'git rev-parse HEAD'.execute().text.trim(),
                'Plugin-BuildDate': buildDate,
                'Plugin-ChildFirstClassLoader': 'false',
                'Plugin-Class': 'org.sonarsource.ruby.plugin.RubyPlugin',
                'Plugin-Description': 'Code Analyzer for Ruby',
                'Plugin-Developers': 'SonarSource Team',
                'Plugin-Display-Version': displayVersion,
                'Plugin-Homepage': 'http://redirect.sonarsource.com/plugins/ruby.html',
                'Plugin-IssueTrackerUrl': 'https://jira.sonarsource.com/browse/SONARRUBY',
                'Plugin-Key': 'ruby',
                'Plugin-License': 'SONAR Source-Available License v1.0',
                'Plugin-Name': 'Ruby Code Quality and Security',
                'Plugin-Organization': 'SonarSource',
                'Plugin-OrganizationUrl': 'http://www.sonarsource.com',
                'Plugin-SourcesUrl': 'https://github.com/SonarSource/sonar-ruby',
                'Plugin-Version': project.version,
                'Plugin-RequiredForLanguages': 'ruby',
                'Sonar-Version': '6.7',
                'SonarLint-Supported': 'true',
                'Version': "${project.version}",
                'Jre-Min-Version': '11',
        )
    }
}
shadowJar {
    // shadowJar can not embed jar files, it always extract them.
    // https://imperceptiblethoughts.com/shadow/configuration/dependencies/#embedding-jar-files-inside-your-shadow-jar
    // the workaround used here, is to put jar in jar
    from file("${buildDir}/tmp/shadowBugWorkaround.jar")
    exclude 'com/headius/racc/**' // from shadowBugWorkaround.jar

    exclude 'javax/**' // com.google.code.findbugs:jsr305

    exclude "ast-${rubygemsAstVersion}/a*"
    exclude "ast-${rubygemsAstVersion}/C*"
    exclude "ast-${rubygemsAstVersion}/G*"
    exclude "ast-${rubygemsAstVersion}/L*"
    exclude "ast-${rubygemsAstVersion}/R*"
    exclude "ast-${rubygemsAstVersion}/test/**"
    exclude "ast-${rubygemsAstVersion}/.*"
    exclude "parser-${rubygemsParserVersion}/bin/**"
    exclude "parser-${rubygemsParserVersion}/C*"
    exclude "parser-${rubygemsParserVersion}/doc/**"
    exclude "parser-${rubygemsParserVersion}/G*"
    exclude "parser-${rubygemsParserVersion}/lib/parser/lexer.rl"
    exclude "parser-${rubygemsParserVersion}/lib/parser/mac*"
    exclude "parser-${rubygemsParserVersion}/lib/parser/ruby1*"
    exclude "parser-${rubygemsParserVersion}/lib/parser/ruby20*"
    exclude "parser-${rubygemsParserVersion}/lib/parser/ruby21*"
    exclude "parser-${rubygemsParserVersion}/lib/parser/ruby22*"
    exclude "parser-${rubygemsParserVersion}/lib/parser/ruby23*"
    exclude "parser-${rubygemsParserVersion}/lib/parser/ruby24*"
    exclude "parser-${rubygemsParserVersion}/lib/parser/ruby25.y"
    exclude "parser-${rubygemsParserVersion}/lib/parser/ruby26*"
    exclude "parser-${rubygemsParserVersion}/lib/parser/rubym*"
    exclude "parser-${rubygemsParserVersion}/lib/parser/runner/**"
    exclude "parser-${rubygemsParserVersion}/L*"
    exclude "parser-${rubygemsParserVersion}/p*"
    exclude "parser-${rubygemsParserVersion}/R*"
    exclude "parser-${rubygemsParserVersion}/test/**"
    exclude "parser-${rubygemsParserVersion}/.*"
    exclude "racc-${rubygemsAstVersion}-java/bin/**"
    exclude "racc-${rubygemsAstVersion}-java/C*"
    exclude "racc-${rubygemsAstVersion}-java/D*"
    exclude "racc-${rubygemsAstVersion}-java/ext/**"
    exclude "racc-${rubygemsAstVersion}-java/fastcache/**"
    exclude "racc-${rubygemsAstVersion}-java/.*"
    exclude "racc-${rubygemsAstVersion}-java/M*"
    exclude "racc-${rubygemsAstVersion}-java/misc/**"
    exclude "racc-${rubygemsAstVersion}-java/R*"
    exclude "racc-${rubygemsAstVersion}-java/rdoc/**"
    exclude "racc-${rubygemsAstVersion}-java/sample/**"
    exclude "racc-${rubygemsAstVersion}-java/s*"
    exclude "racc-${rubygemsAstVersion}-java/tasks/**"
    exclude "racc-${rubygemsAstVersion}-java/test/**"
    exclude "racc-${rubygemsAstVersion}-java/web/**"

    doLast {
        enforceJarSizeAndCheckContent(shadowJar.archiveFile.get().asFile, 14_000_000L, 15_000_000L)
    }
}

artifacts {
    archives shadowJar
}

artifactoryPublish.skip = false

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: shadowJar, classifier: null
            artifact sourcesJar
            artifact javadocJar
        }
    }
}
